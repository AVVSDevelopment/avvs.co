{
  "author": {
    "name": "Randy Merrill",
    "email": "Zoramite+github@gmail.com",
    "url": "http://forthedeveloper.com"
  },
  "name": "css-middleware",
  "description": "LESS.js middleware for connect.",
  "version": "0.1.11",
  "repository": {
    "type": "git",
    "url": "git://github.com/emberfeather/css.js-middleware.git"
  },
  "main": "lib/middleware.js",
  "dependencies": {
    "less": ">= 1.3.3",
    "mkdirp": ">= 0.3.1"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "## Installation\n\n    sudo npm install css-middleware\n\n## Options\n\n<table>\n    <thead>\n        <tr>\n            <th>Option</th>\n            <th>Description</th>\n            <th>Default</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <th><code>force</code></th>\n            <td>Always re-compile css files on each request.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>once</code></th>\n            <td>Only check for need to recompile once after each server restart. Useful for reducing disk i/o on production.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>debug</code></th>\n            <td>Output any debugging messages to the console.</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <th><code>font_src</code></th>\n            <td>Source directory containing the <code>.css</code> files. <strong>Required.</strong></td>\n            <td></td>\n        </tr>\n        <tr>\n            <th><code>dest</code></th>\n            <td>Desitnation directory to output the compiled <code>.css</code> files.</td>\n            <td><code>&lt;font_src&gt;</code></td>\n        </tr>\n        <tr>\n            <th><code>paths</code></th>\n            <td>Specify search paths for <code>@import</code> directives</td>\n            <td>The <code>dirname</code> of <code>&lt;font_src&gt;</code></td>\n        </tr>\n        <tr>\n            <th><code>prefix</code></th>\n            <td>Path which should be stripped from the public <code>pathname</code>.</td>\n            <td></td>\n        </tr>\n        <tr>\n            <th><code>compress</code></th>\n            <td>Compress the output being written to the <code>*.css</code> files. When set to <code>'auto'</code> compression will only happen when the css file ends with <code>.min.css</code> or <code>-min.css</code>.</td>\n            <td><code>auto</code></td>\n        </tr>\n        <tr>\n            <th><code>optimization</code></th>\n            <td>Desired level of LESS optimization. Optionally <code>0</code>, <code>1</code>, or <code>2</code></td>\n            <td><code>0</code></td>\n        </tr>\n        <tr>\n            <th><code>dumpLineNumbers</th>\n            <td>Add line tracking to the compiled css. Optionally <code>0</code>, <code>'comments'</code>, or <code>'mediaquery'</code></td>\n            <td><code>0</code></td>\n        </tr>\n\n    </tbody>\n</table>\n\n## Examples\n\n### Connect\n\n    var lessMiddleware = require('css-middleware');\n\n    var server = connect.createServer(\n        lessMiddleware({\n            font_src: __dirname + '/public',\n            compress: true\n        }),\n        connect.staticProvider(__dirname + '/public')\n    );\n\n### Express\n\n    var lessMiddleware = require('css-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(lessMiddleware({\n            font_src: __dirname + '/public',\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\n### Express - Different `font_src` and `dest`\n\nWhen using a different `font_src` and `dest` you can use the `prefix` option to make the directory structure cleaner.\n\nRequests for static assets (like stylesheets) made to the express server use a `pathname` to look up the file. So if the request is for `http://localhost/stylesheets/styles.css` the `pathname` will be `/stylesheets/styles.css`.\n\nThe css middleware uses that path to determine where to look for css files. In the original example it looks for the css file at `/public/stylesheets/styles.css` and compiles it to `/public/stylesheets/styles.css`.\n\nIf you are using a different `font_src` and `dest` options it causes for more complex directories structures unless you use the `prefix` option. For example, without the `prefix`, and with a `font_src` of `/font_src/css` and a `dest` of `/public` it would look for the css file at `/font_src/css/stylesheets/styles.css` and compile it to `/public/stylesheets/styles.css`. To make it cleaner you can use the `prefix` option:\n\n    var lessMiddleware = require('css-middleware');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        app.use(lessMiddleware({\n            dest: __dirname + '/public/stylesheets',\n            font_src: __dirname + '/font_src/css',\n            prefix: '/stylesheets',\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n    });\n\nUsing the `prefix` it changes the `pathname` from `/stylesheets/styles.css` to `/styles.css`. With that prefix removed from the `pathname` it makes things cleaner. With the `prefix` removed it would look for the css file at `/font_src/css/styles.css` and compile it to `/public/stylesheets/styles.css`.\n\n### Express - Using a temp directory for `dest`\n\nSince css middleware relies on static content to be served by express.static, using temp directories just requires that you inform express about where generated files are built:\n\n    var lessMiddleware = require('css-middleware'),\n        os = require('os');\n\n    var app = express.createServer();\n\n    app.configure(function () {\n        // Other configuration here...\n\n        var tmpDir = os.tmpDir();\n        app.use(lessMiddleware({\n            font_src: __dirname + '/public/stylesheets',\n            dest: tmpDir,\n            compress: true\n        }));\n\n        app.use(express.static(__dirname + '/public'));\n        app.use(express.static(tmpDir));\n    });\n\nUsing a temp directory is useful for read-only file systems, such as a Heroku deployment. By using a temp directory the css files can still be written and served.\n\n### Importing css\n\nBy default the directory in which the compiled files live in is already set as an import directive:\n\n```css\n// file1.css\n\n@import 'file2.css';\n\nbody {\n  color: @bodyColor;\n}\n```\n\n```css\n// file2.css\n\n@bodyColor: #333333;\n```\n\nHowever, you can use the `paths` option if you need to specify other directories in which to search for importable css files.\n\n```js\nvar css = require('css-middleware'),\n    path = require('path');\n\n    lessMiddleware({\n        font_src: path.join(__dirname, 'public'),\n        paths: [path.join(__dirname, 'module', 'css')]\n    });\n```\n\n```css\n// public/base.css\n\n@import 'colors';\n\nbody {\n  color: @bodyColor;\n}\n```\n\n```css\n// module/css/colors.css\n\n@bodyColor: #333333;\n```\n\n### Using bootstrap\n\nHere's an example on how to use Twitter's bootstrap within an Express.js set-up:\n\n```js\n// package.json\n{\n  \"name\": \"my-module\",\n  // ...\n  \"dependencies\": {\n    \"css-middleware\": \"*\",\n    \"bootstrap\": \"git+https://github.com/twitter/bootstrap.git#v2.2.2\",\n    \"express\": \"3.0\"\n  }\n}\n```\n\n```js\n// app.js\nvar express  = require('express')\n  , path     = require('path')\n  , app      = express()\n  , css     = require('css-middleware');\n\napp.configure(function(){\n  // ...\n  var bootstrapPath = path.join(__dirname, 'node_modules', 'bootstrap');\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use('/img', express['static'](path.join(bootstrapPath, 'img')));\n  app.use(app.router);\n  app.use(css({\n    font_src    : path.join(__dirname, 'assets', 'css'),\n    paths  : [path.join(bootstrapPath, 'css')],\n    dest   : path.join(__dirname, 'public', 'stylesheets'),\n    prefix : '/stylesheets'\n  }));\n  app.use(express['static'](path.join(__dirname, 'public')));\n  // ...\n});\n\n// ...\n```\n\n```css\n// assets/css/base.css\n\n@import 'bootstrap';\n@import 'responsive';\n\n@bodyBackground: #FAF7EC;\n@navbarBrandColor: #989CAE;\n\n.brand {\n  font-family: @monoFontFamily;\n}\n```\n\n",
  "readmeFilename": "readme.md",
  "_id": "css-middleware@0.1.11",
  "_from": "css-middleware@"
}
