{"posts":{"1":{"id":0,"title":"Матрица карьерного продвижения персонала","subtitle":"как залог прозрачной и справедливой системы оплаты труда в IT компании","author":"Виталий Аминев","gravatarMail":"v@aminev.me","date":"2013-07-10T00:00:00.000Z","updated":"2013-07-28T17:01:57.000Z","categories":[],"tags":[1],"comments":true,"layout":"post","content":"<h4>Предисловие</h4>\n<blockquote><p>Компания Makeomatic стремится быть как можно ближе к своим клиентам. Именно поэтому мы будем публиковать циклы статей о том, как\nстроится работа в нашей компании. Сегодня мы начнем с одного из первых вопросов, который стоит ребром для каждой из\nIT-компаний, занимающихся коммерческим консалтингом</p>\n</blockquote>\n\n\n<h4>К чему стремится программист?</h4>\n<p>Все мы пытаемся понять что движет нашими сотрудникам в процессе работы и как их потребности эволюционируют в процессе\nполучения знаний, опыта, устоявшейся репутации. За последние полгода мы провели несколько экспериментов с нашей системой\nмотивации, опросили сотрудников, наблюдали за результатами. Скажу сразу, результаты нас<a id=\"more\"></a> не поразили: присутствовали все\nстандартные мотиваторы: деньги, статус, самореализация. Интересным же был тот факт, что основным стимулом к работе очень\nбыстро перестают быть деньги, а на первый план выходит стремление к новым знаниям.</p>\n<h4>От наблюдений к действиям</h4>\n<p>Что же делать с данной информацией? Во многих компаниях, как и в нашей, системы развития персонала и компенсации их труда\nдалеки от идеала. Часто мы основываемся на импровизации, пытаясь реактивно решить проблемы, которые возникают. Иногда\nмы узнаем о новых технологиях на этапе реализации проекта, а как бы было хорошо услышать о них раньше, когда проект еще\nтолько планировался - архитектурные решения могли бы быть совершенно другими. В то же время компенсация труда определяется в момент\nсобеседования и периодически корректируется. При этом она часто либо завышена, либо занижена - все зависит от навыков\nведения переговоров сотрудника, которого вы в итоге возьмете на работу. Чтобы скорректировать ситуацию нам нужно применить\nпринципиально другой и, обязательно, системный подход к задаче:\n    1. Спроектированная система должна быть прозрачна, соглашаясь с ней человек уже будет понимать что она справедлива\n    2. Во главе системы стоит обучение и реализация потенциала сотрудников\n    3. Максимум инициативности - идея, которую может подсказать сотрудник дорогого стоит</p>\n<p>Создав такую экосистему, мы получим менее чувствительный к зарплатным колебаниям коллектив, который будет стремиться\nгенерировать идеи как конвейер. Вероятность появления удачных решений будет увеличиваться, а профит от их реализации не\nзаставит себя ждать.</p>\n<h4>Определение компетенций и технологических навыков, требуемых для развития компании</h4>\n<p>Перейдем к практической части.\nТекущая конъюнктура рынка такова, что спрос на технические навыки огромен.\nСуществует набор мейнстрим категорий, конкуренция в которых очень высока, а цена за час работы минимальна\n(конкуренция со стороны стран с низкими зарплатными стереотипами, например, Индия и Китай).\nНаличие исключительно широко распространённых навыков приемлемо только для junior сотрудников,\nа их использование в высоко маржинальном консалтинге и вовсе сводится к нулю.</p>\n<p>Проанализировав данные по спросу навыков на бирже <a href=\"http://odesk.com\">Odesk.com</a> мы сформировали таблицу, которая\nперечисляет в себе все технологии, используемые в работе, а также показывает важность каждого конкретного навыка\nдля компании, исходя из спроса и сложности изучения. Важность каждого навыка для бизнеса компании может быть\nопределена следующим образом: <code>Важность = Сложность/10 * Спрос</code></p>\n<p><br /></p>\n<p><h4>Технологии, используемые в нашей работе</h4></p>\n<table class='table table-striped table-condensed table-blog table-bordered'>\n<thead>\n    <tr>\n        <th>Навык</th>\n        <th>Сложность<br/>(от 1 до 10)</th>\n        <th>Функциональная область</th>\n        <th>Спрос<br/>(от 1 до 5)</th>\n        <th>Важность</th>\n    </tr>\n</thead>\n<tbody>\n    <tr>\n        <td>Android SDK</td>\n        <td>7</td>\n        <td>Мобильные приложения</td>\n        <td>5</td>\n        <td>3.5</td>\n    </tr>\n    <tr>\n        <td>Angular.js</td>\n        <td>7</td>\n        <td>Веб-программирование</td>\n        <td>5</td>\n        <td>3.5</td>\n    </tr>\n    <tr>\n        <td>iOS SDK</td>\n        <td>7</td>\n        <td>Мобильные приложения</td>\n        <td>5</td>\n        <td>3.5</td>\n    </tr>\n    <tr>\n        <td>PhoneGap</td>\n        <td>7</td>\n        <td>Мобильные приложения</td>\n        <td>5</td>\n        <td>3.5</td>\n    </tr>\n    <tr>\n        <td>Рисование от руки</td>\n        <td>7</td>\n        <td>Дизайн</td>\n        <td>5</td>\n        <td>3.5</td>\n    </tr>\n    <tr>\n        <td>Javascript. Экспертный уровень</td>\n        <td>8</td>\n        <td>Мобильные приложения</td>\n        <td>4</td>\n        <td>3.2</td>\n    </tr>\n    <tr>\n        <td>C#</td>\n        <td>10</td>\n        <td>Программирование</td>\n        <td>3</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>C++</td>\n        <td>3</td>\n        <td>Программирование</td>\n        <td>3</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>Ruby on Rails</td>\n        <td>6</td>\n        <td>Framework</td>\n        <td>5</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>Coffee-script</td>\n        <td>7</td>\n        <td>Мобильные приложения</td>\n        <td>4</td>\n        <td>2.8</td>\n    </tr>\n    <tr>\n        <td>Express.js</td>\n        <td>5</td>\n        <td>Framework</td>\n        <td>5</td>\n        <td>2.5</td>\n    </tr>\n    <tr>\n        <td>MongoDB</td>\n        <td>5</td>\n        <td>База данных</td>\n        <td>5</td>\n        <td>2.5</td>\n    </tr>\n    <tr>\n        <td>Backbone.js</td>\n        <td>6</td>\n        <td>Front-end, Веб-программирование</td>\n        <td>4</td>\n        <td>2.4</td>\n    </tr>\n    <tr>\n        <td>Elasticsearch</td>\n        <td>6</td>\n        <td>Поисковый движок</td>\n        <td>4</td>\n        <td>2.4</td>\n    </tr>\n    <tr>\n        <td>Cassandra</td>\n        <td>7</td>\n        <td>База данных</td>\n        <td>3</td>\n        <td>2.1</td>\n    </tr>\n    <tr>\n        <td>Scrum, Agile</td>\n        <td>7</td>\n        <td>Методология разработки ПО</td>\n        <td>3</td>\n        <td>2.1</td>\n    </tr>\n    <tr>\n        <td>Javascript. Средний уровень</td>\n        <td>5</td>\n        <td>Программирование</td>\n        <td>4</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>Node.js</td>\n        <td>5</td>\n        <td>Программирование, Back-end</td>\n        <td>4</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>Objective-C</td>\n        <td>5</td>\n        <td>Программирование</td>\n        <td>4</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>Ruby</td>\n        <td>5</td>\n        <td>Программирование, Back-end</td>\n        <td>4</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>Facebook API</td>\n        <td>4</td>\n        <td>Веб-программирование, Social Media</td>\n        <td>5</td>\n        <td>2</td>\n    </tr>\n    <tr>\n        <td>Opscode Chef</td>\n        <td>6</td>\n        <td>Администрирование</td>\n        <td>3</td>\n        <td>1.8</td>\n    </tr>\n    <tr>\n        <td>Java</td>\n        <td>6</td>\n        <td>Программирование</td>\n        <td>3</td>\n        <td>1.8</td>\n    </tr>\n    <tr>\n        <td>Heroku</td>\n        <td>6</td>\n        <td>PaaS</td>\n        <td>3</td>\n        <td>1.8</td>\n    </tr>\n    <tr>\n        <td>Adobe Photoshop</td>\n        <td>4</td>\n        <td>Дизайн</td>\n        <td>4</td>\n        <td>1.6</td>\n    </tr>\n    <tr>\n        <td>WP SDK</td>\n        <td>8</td>\n        <td>Мобильные приложения</td>\n        <td>2</td>\n        <td>1.6</td>\n    </tr>\n    <tr>\n        <td>Twitter API</td>\n        <td>4</td>\n        <td>Веб-программирование, Social Media</td>\n        <td>4</td>\n        <td>1.6</td>\n    </tr>\n    <tr><td>Adobe Illustrator</td><td>5</td><td>Дизайн</td><td>3</td><td>1,5</td></tr>\n    <tr><td>Grunt.js</td><td>5</td><td>Программирование, build system</td><td>3</td><td>1,5</td></tr>\n    <tr><td>jQuery</td><td>3</td><td>Front-end, Веб-программирование</td><td>5</td><td>1,5</td></tr>\n    <tr><td>PHP</td><td>3</td><td>Веб-программирование</td><td>5</td><td>1,5</td></tr>\n    <tr><td>Git. Базовый уровень</td><td>3</td><td>Командная работа, Система контроля версий</td><td>5</td><td>1,5</td></tr>\n    <tr><td>OS X SDK</td><td>7</td><td>Программирование, Desktop</td><td>2</td><td>1,4</td></tr>\n    <tr><td>Git. Продвинутый уровень</td><td>7</td><td>Командная работа, Система контроля версий</td><td>2</td><td>1,4</td></tr>\n    <tr><td>SCRUM</td><td>7</td><td>Методология разработки ПО</td><td>2</td><td>1,4</td></tr>\n    <tr><td>Less</td><td>4</td><td>Верстка, Веб-программирование</td><td>3</td><td>1,2</td></tr>\n    <tr><td>AWS</td><td>4</td><td>Администрирование</td><td>3</td><td>1,2</td></tr>\n    <tr><td>*nix</td><td>3</td><td>Администрирование</td><td>4</td><td>1,2</td></tr>\n    <tr><td>RethinkDB</td><td>6</td><td>База данных</td><td>2</td><td>1,2</td></tr>\n    <tr><td>Шаблонизаторы</td><td>3</td><td>Верстка, Веб-программирование</td><td>4</td><td>1,2</td></tr>\n    <tr><td>GitHub</td><td>3</td><td>Интерфейс к системе контроля версий</td><td>4</td><td>1,2</td></tr>\n    <tr><td>Javascript. Базовый уровень</td><td>3</td><td>Программирование</td><td>2</td><td>0,6</td></tr>\n    <tr><td>MySQL</td><td>3</td><td>Базы данных</td><td>2</td><td>0,6</td></tr>\n    <tr><td>BitBucket</td><td>3</td><td>Интерфейс к системе контроля версий</td><td>2</td><td>0,6</td></tr>\n    <tr><td>CSS3</td><td>2</td><td>Верстка, Веб-программирование</td><td>2</td><td>0,4</td></tr>\n    <tr><td>HTML</td><td>1</td><td>Верстка, Веб-программирование</td><td>2</td><td>0,2</td></tr>\n</tbody>\n</table>\n\n<p>Отдельным списком сюда вошли навыки, помогающие управлять командой и общаться с непосредственным клиентом:</p>\n<ol>\n<li>английский язык (разговорный и технический)</li>\n<li>навыки презентации</li>\n<li>умение ставить задачи и распределять ресурсы</li>\n<li>умение управлять командой</li>\n</ol>\n<h4>Формирование компенсационного пакета и матрицы развития сотрудников</h4>\n<p>Используя полученные данные можно сформировать несколько траекторий развития, которые будут покрывать выбранные области развития компании.\nБыло выделено три основных траектории развития:\n1.    Веб-программирование\n2.    Мобильные приложения\n3.    Дизайн (не является приоритетным, но часто требуется как смежный навык)</p>\n<p>Каждому сотруднику можно будет выбрать именно то, что ему по душе, где он сможет полностью раскрыть свой творческий потенциал.\nВсего было выделено 5 статусных уровней в компании:</p>\n<ol>\n<li>Junior</li>\n<li>Basic</li>\n<li>Senior</li>\n<li>Lead</li>\n<li>Vice President</li>\n</ol>\n<p>В каждом из статусных уровней присутствует каждая из ветвей развития, при этом, они ранжированы с учетом важности для компании.\nПовышение каждого из уровней будет сопровождаться как материальными выгодами (рост зарплаты),\nтак и престижем выполняемой работы, открытием дополнительных поощрительных опций. Сам пакет еще не сформирован окончательно:</p>\n<ol>\n<li>добровольное медицинское страхование – актуально для сотрудников переезжающих из регионов России</li>\n<li>корпоративное питание</li>\n<li>посещение отраслевых и профессиональных конференций как в России, так и за рубежом</li>\n<li>бонусная система «подарков»</li>\n<li>визуально отличительное оформление портретов сотрудников на портале компании – позволит выделить их статусность</li>\n</ol>\n<p>На основе набора навыков была сформирована карта профессионального развития.\nНа ней отражены все возможные чины и навыки, владение которыми подразумевает должность.\nПутем анализа данной матрицы была оценена важность каждой должности для компании и составлена матрица карьерного развития в компании.</p>\n<img src=\"/img/careermatrix.png\" class=\"img-polaroid\" title=\"Матрица карьерного развития Makeomatic\">\n\n\n<p><br/>\nКак результат, мы получаем такую систему мотивации, при которой материальная часть напрямую зависит от труда,\nкоторый сотрудники вкладывают в компанию, а нематериальная состоит из разнонаправленных компонентов:\nоткрытости информации, повышения «социального» статуса внутри компании,\nвозможностей раскрыть творческий потенциал и самореализоваться.</p>\n<p>А все это, в свою очередь, позволяет компании оказывать исключительно качественные и высокотехнологичные услуги,\nведь сотрудники думают в первую очередь о деле, а не о насущных проблемах.</p>\n","excerpt":721,"source":"_posts/CareerMatrix.md","slug":"CareerMatrix","ctime":"2013-07-28T17:01:57.000Z","mtime":"2013-07-28T17:01:57.000Z"},"2":{"id":0,"title":"Блог джуниора. Веб-программирование с нуля","subtitle":"Идея курса и первый шаг","author":"Горшунов Владимир","gravatarMail":"gorshunov.vladimir@gmail.com","date":"2013-08-11T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[6,3],"comments":true,"layout":"post","content":"<h4>Что такое блог джуниора?</h4>\n<blockquote><p>Острая нехватка специалистов на рынке сподвигла компанию Makeomatic создать свой собственный корпоративный университет.\nПервый поток обучающихся будет пробным, на нем мы будем формировать материал для дальнейшего изучения.\nКурс рассчитан на фактическое отсутствие знаний у новичков. Важно лишь системное мышление и желание обучаться.\nВ целом мы будем охватывать весь материал, который так или иначе связан с HTML5, Javascript, Шаблонизаторами, различными базами данных,\nа также плавно перейдем к разработке мобильных приложений, используя PhoneGap.</p>\n<footer><strong>Виталий Аминев</strong></footer></blockquote>\n\n\n<h4>Практика обучения</h4>\n<p>Все обучение будет строиться на наборе сквозных проектов, которые имеют применение в реальной жизни. Смею заметить, что все проекты\nдостаточно простые, и можно найти множество аналогов в опен сорсе.</p>\n<p>Первой практической задачей будет ознакомление со стеком <code>Node.js</code>, <code>MongoDB</code>, <code>Express.js</code>, <code>Less</code>, <code>MVC архитектурой</code>.\nПотребуется реализовать следующий простенький функционал: регистрация пользователя, работа с <code>MongoDB</code> через ODM <code>Mongoose</code>,\nхранение пароля в зашифрованном виде, используя <code>blowfish</code> как метод шифрования.\n<a id=\"more\"></a></p>\n<h4>Express.js, MongoDB, Mongoose ODM</h4>\n<h5>Краткий экскурс в <code>Model-View-Controller</code></h5>\n<ul>\n<li>Модель - используется для работы с данными. Получает их, преобразовывает и отдает в контроллеры</li>\n<li>Контроллер - связующее звено между моделями и видами, агрегирует данные, виды и отдает все это пользователю</li>\n<li>Вид - некий шаблон, которые в совокупности с данными дает в нашем случае на выходе дает разметку HTML5</li>\n</ul>\n<p>Зачем и почему используют эту концепцию вы благополучно можете загуглить или захабрить.</p>\n<h5>Express.js - базовый фреймворк для вашего приложения на все времена</h5>\n<figure class=\"highlight lang-js\"><figcaption><span>app.js </span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> express = require(<span class=\"string\">'express'</span>),\n    app = express();\n\n<span class=\"comment\">/*\n    здесь конфигурируем приложение, добавляем Middleware -- это различные функции, которые выполняются в\n    процессе жизненного цикла запроса\n*/</span>\n<span class=\"keyword\">var</span> secret = <span class=\"string\">\"somesecretforcookie\"</span>;\n\napp.configure(<span class=\"keyword\">function</span>(){\n\n        app.set(<span class=\"string\">'views'</span>, __dirname + <span class=\"string\">\"/views\"</span>);\n\n        app.use(express.compress()); <span class=\"comment\">//gzip-сжатие</span>\n        app.use(express.bodyParser({limit: <span class=\"string\">'5mb'</span>})); <span class=\"comment\">// парсим POST запросы</span>\n        app.use(express.cookieParser(secret)); <span class=\"comment\">// парсинг кук</span>\n        app.use(express.session()); <span class=\"comment\">// сессия с хранилищем в памяти</span>\n        app.use(express.methodOverride());\n\n        app.use(<span class=\"string\">'/static'</span>, express.static(__dirname+<span class=\"string\">'/static'</span>, { maxAge: oneDay*<span class=\"number\">5</span> }));\n        app.use(app.router);\n\n\n        app.use(<span class=\"keyword\">function</span>(err,req,res,next){\n          console.error(err);\n          res.send(<span class=\"string\">\"Critical error\"</span>, <span class=\"number\">500</span>);\n        });\n\n});\n\nrequire(<span class=\"string\">\"./routes\"</span>); <span class=\"comment\">// здесь подключим руты</span>\n\napp.listen(<span class=\"number\">8080</span>);\n</pre></td></tr></table></figure>\n\n<p><br/>\nТак мы поднимаем веб-сервер на порту 8080, и на все запросы он будет выводить <strong>Hello World!</strong></p>\n<p>Базовая структура проекта:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"code\"><pre>|- models/..\n|- views/..\n|- controllers/..\n|- middleware/..\n|- <span class=\"keyword\">static</span>/.. <span class=\"comment\">// различные статичные ассеты (less, js, imgs, etc)</span>\n|- package<span class=\"variable\">.json</span> <span class=\"comment\">// здесь указываем все зависимости</span>\n|- app<span class=\"variable\">.js</span> <span class=\"comment\">// entry-point для нашего проекта</span>\n|- config<span class=\"variable\">.js</span> <span class=\"comment\">// подключения к БД, и тп вещи</span>\n|- routes<span class=\"variable\">.js</span> <span class=\"comment\">// для формирования рутов</span>\n</pre></td></tr></table></figure>\n\n<h5>Работа с БД, моделями</h5>\n<figure class=\"highlight lang-javascript\"><figcaption><span>config.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n\n<span class=\"comment\">// инициализируем подключение к БД</span>\nexports.db = mongoose.connect(process.ENV.MongoURI || <span class=\"string\">\"mongodb://localhost/junior\"</span>);\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><figcaption><span>models/User.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">\"mongoose\"</span>),\n    Schema = mongoose.Schema,\n    ObjectId = Schema.Types.ObjectId;\n\n<span class=\"keyword\">var</span> User = <span class=\"keyword\">new</span> Schema({\n       username: {\n        type: String,\n        unique: <span class=\"literal\">true</span>,\n        required: <span class=\"literal\">true</span>\n       },\n       password: {\n        type: String,\n        required: <span class=\"literal\">true</span>\n       }\n    });\n\n<span class=\"comment\">/*\n здесь отдаем модель для дальнейшего использования, альтернативно возможно\n получить эту модель после инициализации через mongoose.model(\"User\");\n*/</span>\nmodule.exports = mongoose.model(<span class=\"string\">\"User\"</span>, User);\n</pre></td></tr></table></figure>\n\n<p><br/>\nДалее мы создадим страницу для регистрации - там будет два инпута - username и password. Они будут передавать данные\nпо руту <code>POST /register</code>\nКак создать саму страницу - гугл в помощь.\n1. Добавим обработчик</p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>routes.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre>\nmodule.exports = <span class=\"keyword\">function</span>(app){\n\n    app.post(<span class=\"string\">\"/register\"</span>, require(<span class=\"string\">\"./controllers/auth.js\"</span>).post);\n\n    app.get(<span class=\"string\">\"/*\"</span>, <span class=\"keyword\">function</span>(req,res,next){\n       res.send(<span class=\"string\">\"Hello World!\"</span>);\n    });\n\n}\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><figcaption><span>controllers/auth.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> User = require(<span class=\"string\">\"../models/User.js\"</span>);\n\n\nexports.post = <span class=\"keyword\">function</span>(req,res,next){\n\n   User.genPassword(req.body.password, <span class=\"keyword\">function</span>(err, hash){\n        <span class=\"comment\">// обрабатываем возможные ошибки</span>\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n\n        <span class=\"comment\">// создаем пользователя</span>\n        User.create({user: req.body.user, password: hash}, <span class=\"keyword\">function</span>(err, user){\n            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n\n            <span class=\"comment\">// сохраняем пользователя в сессию, может быть понадобится</span>\n            req.session.user = user;\n\n            <span class=\"comment\">// говорим что все хорошо</span>\n            res.json({success: <span class=\"literal\">true</span>});\n        });\n   });\n\n}\n</pre></td></tr></table></figure>\n\n<p><br/>\nДобавляем генерацию пароля</p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>models/User.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre>...\n<span class=\"keyword\">var</span> bcrypt = require(<span class=\"string\">'bcrypt'</span>); <span class=\"comment\">// отвечает за шифрование паролей, т.к. в базе данных они хранятся зашифрованными. Дополнительно: https://github.com/ncb000gt/node.bcrypt.js/</span>\n...\n\nUser.statics.genPassword = <span class=\"keyword\">function</span>(password, callback){\n    <span class=\"keyword\">if</span> (!password) <span class=\"keyword\">return</span> callback(<span class=\"string\">\"Не указан пароль\"</span>);\n\n    bcrypt.hash(password, <span class=\"number\">10</span>, callback);\n};\n\n...\n</pre></td></tr></table></figure>\n\n<p>На текущий момент мы можем создавать пользователей. Добавим страничку, доступ к которой будет только у зарегистрированного пользователя:</p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>middleware/session.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"code\"><pre>\nexports.userOnly = <span class=\"keyword\">function</span>(req,res,next){\n  <span class=\"comment\">// если есть юзер в сессии - все хорошо</span>\n  <span class=\"keyword\">if</span> (req.session.user) <span class=\"keyword\">return</span> next();\n\n  <span class=\"comment\">// если нет доступа - то так</span>\n  res.send(<span class=\"string\">\"Нет доступа\"</span>, <span class=\"number\">403</span>);\n};\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><figcaption><span>routes.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> sessionMiddleware = require(<span class=\"string\">\"./middleware/session\"</span>);\n...\n\napp.get(<span class=\"string\">'/secretPage'</span>, sessionMiddleware.userOnly, require(<span class=\"string\">\"./controllers/secretPage\"</span>).get);\n\n...\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><figcaption><span>controllers/secretPage.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre>exports.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res, next)</span> {</span> <span class=\"comment\">//для возможности вызова  из другого файла</span>\n    res.send(<span class=\"string\">\"Some secret page\"</span>);\n}\n</pre></td></tr></table></figure>\n\n<p><br/>\nНа сегодня рабочий день подходит к концу, поэтому продолжение следует...\nСпасибо за внимание, задавайте вопросы и спрашивайте о топиках, которые интересны.</p>\n","excerpt":1317,"source":"_posts/Introduction.md","slug":"Introduction","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"3":{"id":0,"title":"Angular.JS: введение и основные концепции","subtitle":"разбираем Angular.JS на пальцах","author":"Дмитрий Горбунов","gravatarMail":"atskiisotona@gmail.com","date":"2013-08-14T00:00:00.000Z","updated":"2013-08-18T22:36:50.000Z","categories":[],"tags":[5,6],"comments":true,"layout":"post","content":"<h2>Подготовка</h2>\n<h3>Различия версий</h3>\n<p>На момент написания (начало июля 2013) готовится к выходу AngularJS 2.0, который будет фактически представлять собой 1.1.5 с минимальными изменениями.</p>\n<p>Отличия между 1.1.5 и 1.0.7 уже достаточно велики, и рассматривать технически устаревшую 1.0.7 нет смысла.</p>\n<h3>Установка</h3>\n<p>Google рекомендует использовать версию AngularJS, поставляемую через CDN, для рабочих окружений. Для разработки следует скачать архив, включающий в себя полноценные отладочные версии библиотеки, поскольку только они предлагают досточно подробные сообщения об ошибках. Впрочем, в 2.0 планируется серьёзно улучшить этот вопрос, так как сейчас сообщения об ошибках практически не дают понимания происходящего.</p>\n<a id=\"more\"></a>\n\n<h3>Подключение</h3>\n<p>Следует сразу отметить, что AngularJS проповедует декларативный подход, поэтому ваше приложение вообще может не включать ни единой строчки JavaScript и вполне нормально работать.</p>\n<p>Для подключения AngularJS к веб-странице достаточно подключить основной файл:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"doctype\">&lt;!doctype html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">ng-app</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">label</span>&gt;</span>Имя:<span class=\"tag\">&lt;/<span class=\"title\">label</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"yourName\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">hr</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n</pre></figure></code></pre>\n<p>В примере выше используются сразу две основных концепции AngularJS: область видимости и двойное связывание данных. Рассмотрим их подробнее ниже.</p>\n<h2>Основные концепции</h2>\n<h3>Область видимости</h3>\n<p>Область видимости (scope) является наиважнейшим элементом AngularJS и ведёт себя идентично области видимости переменных в классических языках программирования. Так же, как и, к примеру, в C, существует глобальная область видимости и существуют вложенные в неё дочерние. Однако, в отличие от C, области видимости в AngularJS играют намного более важную роль.</p>\n<p>Во-первых, область видимости — не более, чем обычный объект JavaScript. Это значит, что работа с ней может осуществляться простым добавлением/изменением свойств объектов.</p>\n<p>Во-вторых, область видимости позволяет следить за изменениями собственных свойств, а также свойств дочерних/родительских областей видимости.</p>\n<p>В-третьих, AngularJS не работает за пределами какой-либо области видимости.</p>\n<p>Области видимости настолько важны, что AngularJS предоставляет огромное количество функций для работы с ними и для использования областей видимости в сторонних компонентах.</p>\n<h4>Применение к области видимости</h4>\n<p><em>Важно</em>: если вы изменяете какой-либо объект, лежащий внутри области видимости, из-за пределов AngularJS, необходимо всегда вызывать метод $scope.$apply. Мы вернёмся к этому чуть позже.</p>\n<h3>Связывание данных</h3>\n<p>AngularJS предлагает концепцию связывания данных (data binding), работающую в обе стороны. Однако следует обратить внимание на то, что центровым объектом связывания данных всегда является область видимости. Только объекты, находящиеся внутри области видимости, могут участвовать в связывании данных.</p>\n<h4>Как это работает</h4>\n<p>Обратимся к примеру выше. В нём имеется поле ввода, к которому привязана переменная, лежащая внутри области видимости, автоматически созданной AngularJS (это <em>не</em> глобальная область видимости). ngModel является <em>директивой</em>, которая меняет поведение того или иного элемента DOM. В данном случае, эта директива связывает содержимое input и переменную в области видимости. Это <em>не магия</em>, это не более чем директива, которую вы легко можете реализовать самостоятельно, однако разработчики уже реализовали её, потому что такое поведение требуется очень часто.</p>\n<blockquote>\n<p>Чисто технически, директива добавляет обработчик события изменения введённого в input значения, в котором производит вызов $scope.$apply для изменения переменной в области видимости, а также применяет обработчик $scope.$watch на области видимости, в котором меняется значение в поле ввода.</p>\n</blockquote>\n<p>Попробуйте ввести в поле ввода любой текст и понаблюдать, как изменяется выводимый текст. Попробуйте открыть консоль и ввести <code>$scope.yourName = &quot;test&quot;</code>, обратите внимание, что текст и значение в поле ввода не изменились, так как AngularJS ничего не знает про консоль и не может отследить изменения, произведённые из неё. Теперь введите <code>$scope.$apply()</code> и изменения обработаются AngularJS.</p>\n<p><em>Важно</em>: любые события браузера вызываются <strong>вне</strong> области видимости AngularJS, поэтому внутри ваших обработчиков таких событий необходимо вызывать $scope.$apply.</p>\n<h3>Внедрение зависимостей</h3>\n<p>Внедрение зависимостей (dependency injection, DI) является третьим краеугольным камнем AngularJS, однако он не относится непосредственно к логике работы библиотеки, а скорее к организации кода.</p>\n<p>Грубо говоря, DI позволяет любой функции сказать: «мне нужны эти сервисы, эти и эти», после чего AngularJS автоматически предоставит эти сервисы, где бы они ни были реализованы и где бы ни находились. Разумеется, это работает только в пределах AngularJS.</p>\n<h4>Сервис</h4>\n<p>Сервис в DI — не более, чем некоторый объект, который предоставляет некоторую функциональность. Это может быть что угодно, от простой константы до фабрики классов.</p>\n<h2>Приложение</h2>\n<p>Теперь можно поговорить о том, как описанные выше концепции работают вместе для реализации приложений.</p>\n<h3>Каркас и ng-app</h3>\n<p>Вся библиотека AngularJS разбита на независимые модули, соответственно от вашего приложения ожидается такая же организация и для этого предоставлено всё необходимое.</p>\n<p>ngApp это директива, сообщающая AngularJS: «здесь находится приложение». DOM, окружённый элементом с этой директивой будет работать под управлением AngularJS.</p>\n<h4>Создание модуля</h4>\n<p>Для начала сообщим AngularJS, что мы хотим не просто создать приложение, а подключить к нему собственную функциональность:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"doctype\">&lt;!doctype html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"tutorial\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">label</span>&gt;</span>Имя:<span class=\"tag\">&lt;/<span class=\"title\">label</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"yourName\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">hr</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n</pre></figure></code></pre>\n<p>Само приложение является просто модулем, давайте создадим его (<em>важно</em>: имя модуля должно совпадать со значением, переданным директиве ngApp):</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"title\">var</span> app = angular.<span class=\"module\"><span class=\"keyword\">module</span><span class=\"container\">(\"<span class=\"title\">tutorial</span>\", [])</span>\n</pre></figure></code></pre>\n<p>Обратите внимание на эту запись, поскольку она является стандартной для всех элементов AngularJS. В особенности обратите внимание на второй параметр-массив. Это — зависимости для DI, и везде, где возможно внедрение зависимостей такая запись является предпочтительной, хотя возможны и другие варианты.</p>\n<p>Общая форма внедрения зависимостей выглядит так:</p>\n<pre><code><figure class=\"highlight\"><pre>[<span class=\"string\">\"dependency1\"</span>, <span class=\"string\">\"dependency2\"</span>, <span class=\"keyword\">...</span>, <span class=\"keyword\">function</span>(dependency1, dependency2, <span class=\"keyword\">...</span>) {}]\n</pre></figure></code></pre>\n<p>Что важно, имена параметров функции, в которую внедряются зависимости, могут быть любыми, важен лишь их порядок. Это позволяет пользоваться программами для сжатия кода, не боясь, что что-то перестанет работать.</p>\n<p>Второй вариант, который можно использовать для обучения и в тех случаях, когда код не сжимается, выглядит так:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"keyword\">function</span>(dependency1, dependency2, <span class=\"keyword\">...</span>) {}\n</pre></figure></code></pre>\n<p>В данном случае наоборот, важны имена параметров, а не их порядок. В первом случае мы передаём имена в виде строк, которые не будут изменены при сжатии кода, во втором случае имена извлекаются из параметров функции, поэтому изменение имени параметра будет иметь плачевные последствия.</p>\n<h4>Настройка провайдеров</h4>\n<p>Провайдер — это функция, которая отвечает за создание сервисов. Если требуется перед внедрением сервиса в функцию настроить его функциональность, следует обращаться к провайдеру. Наличие/отсутствие провайдера у сервиса определяется целиком и полностью его разработчиком.</p>\n<pre><code><figure class=\"highlight\"><pre>app.config([<span class=\"string\">\"$locationProvider\"</span>, function(<span class=\"variable\">$locationProvider</span>) {\n    <span class=\"comment\">// обратите внимание, что я сохранил название параметра</span>\n    <span class=\"comment\">// это полезно для читаемости кода</span>\n\n    <span class=\"variable\">$locationProvider</span>.html5Mode(<span class=\"keyword\">true</span>)\n}])\n</pre></figure></code></pre>\n<p>В примере выше мы настроили работу сервиса $location, включив режим html5. Теперь приложение будет работать с полноценными URL, без использования хэшей, если браузер поддерживает HTML5 History API.</p>\n<p>Аналогичным образом настраиваются другие сервисы.</p>\n<h4>MVC</h4>\n<p>MVC в AngularJS реализовано отдельным модулем и не играет важной роли в самой библиотеке. Вы можете пользоваться любой сторонней реализацией, или разработать собственную.</p>\n<p>Для включения MVC в 1.1.5 не требуется дополнительных действий. В 1.1.6 (и 2.0) потребуется подключить angular-router.js и в зависимости приложения добавить ngRoute:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"title\">var</span> app = angular.<span class=\"module\"><span class=\"keyword\">module</span><span class=\"container\">(\"<span class=\"title\">tutorial</span>\", [\"<span class=\"title\">ngRoute</span>\"])</span>\n</pre></figure></code></pre>\n<p>ngRoute настраивается с помощью $routeProvider, например, так:</p>\n<pre><code><figure class=\"highlight\"><pre>app.config([<span class=\"comment\">\"$routeProvider\"</span>, function(<span class=\"char\">$r</span>outeProvider) {\n    <span class=\"char\">$r</span>outeProvider.when(<span class=\"comment\">\"/\"</span>, {\n        <span class=\"method\">templateUrl:</span> <span class=\"comment\">\"/partials/index.html\"</span>,\n        <span class=\"method\">controller:</span> <span class=\"comment\">\"defaultCtrl\"</span>\n    })\n}])\n</pre></figure></code></pre>\n<p>Подробнее о том, что здесь происходит, вы можете прочитать в документации к модулю ngRoute или в справке по $route на сайте AngularJS.</p>\n<h5>Модели</h5>\n<p>Как таковых, моделей в AngularJS нет. Использованная выше ngModel — не более чем директива, меняющая поведение DOM, а model лишь удобное имя. Вы можете использовать к примеру модели Backbone.js, а можете вообще запрашивать данные с сервера вручную или пользоваться модулем ngResource (читайте документацию $http и $resource).</p>\n<p>Важно помнить, что всё связывание данных происходит исключительно на области видимости. Поместили модель в область видимости? Всё отлично работает.</p>\n<h5>Контроллеры</h5>\n<p>В отличие от моделей, концепция контроллеров в AngularJS есть, однако относятся контроллеры здесь непосредственно к DOM. Рассмотрим пример:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"doctype\">&lt;!doctype html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"tutorial\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"defaultCtlr\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">label</span>&gt;</span>Имя:<span class=\"tag\">&lt;/<span class=\"title\">label</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"yourName\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">hr</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">button</span> <span class=\"attribute\">ng-click</span>=<span class=\"value\">\"sayHello(yourName)\"</span>&gt;</span>Сказать привет<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n</pre></figure></code></pre>\n<p>И код контроллера (заодно узнаем, как они создаются):</p>\n<pre><code><figure class=\"highlight\"><pre>app.controller(<span class=\"string\">\"defaultCtrl\"</span>, [<span class=\"string\">\"$scope\"</span>, function(<span class=\"variable\">$scope</span>) {\n    <span class=\"variable\">$scope</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(name)</span> {</span>\n        alert(<span class=\"string\">\"Привет, \"</span> + name);\n    }\n}])\n</pre></figure></code></pre>\n<p>В контроллер необходимо внедрить хотя бы $scope, в противном случае он будет вещью в себе и не сможет ничего сделать с областью видимости, а именно для этого предназначен контроллер. Однако в 2.0 предлагается новый, упрощённый вариант создания контроллеров:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"doctype\">&lt;!doctype html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"tutorial\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"defaultCtlr as ctrl\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">label</span>&gt;</span>Имя:<span class=\"tag\">&lt;/<span class=\"title\">label</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"yourName\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">hr</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">button</span> <span class=\"attribute\">ng-click</span>=<span class=\"value\">\"ctrl.sayHello(yourName)\"</span>&gt;</span>Сказать привет<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n\napp.controller(\"defaultCtrl\", function() {\n    this.sayHello = function (name) {\n        alert(\"Привет, \" + name);\n    }\n})\n</pre></figure></code></pre>\n<p>Обратите внимание, способы <em>не равнозначны</em>. И <code>this.yourName</code> не будет равен <code>$scope.yourName</code>. Однако второй способ позволяет вообще не внедрять $scope в контроллер и очистить код от ненужных зависимостей. Кроме того функции контроллера не будут зависеть от $scope и их можно будет использовать в других частях приложения, а не только в одной конкретной области видимости (по этой же причине рекомендуется передавать в функции контроллера параметры, а не полагаться на $scope).</p>\n<p><em>Важно</em>: контроллер <strong>всегда</strong> создаёт внутреннюю область видимости, поэтому в примере ниже anotherName видно лишь внутри anotherCtrl, и мы всегда будем видеть «Не привет,», какой бы текст во второе поле ввода мы ни вводили. Проверьте, что будет выведено внутри anotherCtrl для yourName. Почему?</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"doctype\">&lt;!doctype html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">html</span> <span class=\"attribute\">ng-app</span>=<span class=\"value\">\"tutorial\"</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"defaultCtlr as ctrl\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">label</span>&gt;</span>Имя:<span class=\"tag\">&lt;/<span class=\"title\">label</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"yourName\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">hr</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Не привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">button</span> <span class=\"attribute\">ng-click</span>=<span class=\"value\">\"ctrl.sayHello(yourName)\"</span>&gt;</span>Сказать привет<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span>\n\n        <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-controller</span>=<span class=\"value\">\"anotherCtrl\"</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"anotherName\"</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Ещё раз привет, !<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span>\n</pre></figure></code></pre>\n<p>Внутри anotherCtrl существует своя область видимости, однако родительская по отношению к нему область видимости также доступна из него. В данном случае  правильнее было бы записать как . При этом выражение с yourName будет верно вычислено в обоих случаях и мы увидим «Ещё раз привет, Вася», если ввести «Вася» в поле ввода, относящееся к контроллеру defaultCtrl.</p>\n<p>У каждой области видимости есть свойства $parent (указывает на родительскую область видимости) и $root (указывает на глобальную область видимости).</p>\n<p><em>Важно</em>: контроллер должен существовать, иначе AngularJS выдаст ошибку.</p>\n<p>Не рекомендуемый способ создавать контроллеры:</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anotherCtrl</span><span class=\"params\">(<span class=\"variable\">$scope</span>)</span> {</span>\n}\n</pre></figure></code></pre>\n<p>В данном случае вы не только засоряете глобальную область видимости JS (<em>не область видимости AngularJS</em>), но ещё и лишаетесь возможности грамотно организовать DI.</p>\n<h5>ngView</h5>\n<p>Директива ngView позволяет динамически подгружать часть HTML в зависимости от значения templateUrl в настройках $routeProvider. Это делается $route автоматически, равно как и подключение указанного контроллера.</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">ng-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</pre></figure></code></pre>\n<p><em>Важно</em>: стандартная реализация поддерживает лишь один ngView на приложение. Вложенные ngView также не поддерживаются.</p>\n<p>Для расширенных возможностей MVC рекомендуется использовать AngularUI-Router, поддерживающий вышеописанный функционал.</p>\n<h3>Шаблоны и выражения</h3>\n<p>Здесь мы поговорим о V из MVC применительно к AngularJS. Раздел вынесен отдельно ввиду большой важности.</p>\n<h4>Выражения</h4>\n<p>Выражением в AngularJS считается практически любое выражение JavaScript. Вы можете выполнять математические операции, вызывать функции и т.д. Существуют ограничения, с которыми вы можете ознакомиться в документации, мы же рассмотрим для чего используются выражения.</p>\n<p>Выражение в AngularJS заключается в двойные фигурные скобки и может быть использовано непосредственно в DOM. AngularJS вычисляет выражение и подставляет его значение прямо в DOM. При этом используются все преимущества связывания данных: значение выражения обновляется с изменением входящих в него переменных (или результатов вычисления функции).</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ng-model</span>=<span class=\"value\">\"counter\"</span>&gt;</span>\n\n</span><span class=\"variable\">$scope.somefunc</span><span class=\"xml\"> = function () {\n    return parseInt(</span><span class=\"variable\">$scope.counter</span><span class=\"xml\">) + </span><span class=\"number\">1</span><span class=\"xml\">\n}\n\n</span><span class=\"variable\">$scope.counter</span><span class=\"xml\"> = </span><span class=\"number\">5</span><span class=\"xml\"></span>\n</pre></figure></code></pre>\n<p>Здесь я использовал не рекомендованный стиль кода с привязкой к $scope внутри обработчика, поскольку это нагляднее показывает, что связывание данных в AngularJS работает даже в том случае, если выражение не содержит прямой ссылки на данные.</p>\n<h4>Шаблоны</h4>\n<p>Шаблоны в AngularJS это не более, чем обычный HTML, расширенный с помощью директив и выражений. Выражения используются для вывода данных, директивы  — для расширения функциональности HTML, превращая его в DSL (Domain Specific Language) для вашего конкретного приложения. Вы можете добавить директиву, создающую интерфейс с вкладками, можете добавить директиву, которая выводит в цикле содержимое массива с данными (такая директива встроена в AngularJS), можете выводить HTML в зависимости от значения той или иной переменной и так далее. Всё ограничено лишь вашей фантазией. Подлинная мощь AngularJS заключена именно в директивах, а обычный <code>&lt;div&gt;</code>, расширенный директивой может превратиться во что угодно.</p>\n<p>Создание директив — расширенная тема, к которой мы обратимся позже, равно как и к созданию сервисов.</p>\n","excerpt":750,"source":"_posts/AngularJSIntro.md","slug":"AngularJSIntro","ctime":"2013-08-18T22:36:50.000Z","mtime":"2013-08-18T22:36:50.000Z"},"4":{"id":0,"title":"Блог джуниора. CRUD операции, Mongoose ODM","subtitle":"небольшие инсайты и техники для SPA","author":"Горшунов Владимир","gravatarMail":"gorshunov.vladimir@gmail.com","date":"2013-08-16T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[6,8,9],"comments":true,"layout":"post","content":"<h4>Задачи</h4>\n<p>В прошлый раз мы сделали небольшое приложение, которое позволяет регистрироваться пользователям. У близких к веб-программированию\nлюдей все операции, описанные в предыдущем посте заняли бы минут 15. Этот пост продолжает серию обучающих статей для джуниоров и будет\nполезен лишь им.</p>\n<p>Итак, задачи на сегодня:\n1. Добавить <code>API endpoint</code> для модели <code>User</code>, используя конвенцию <code>RESTful</code>\n2. Добавить суперюзера для работы в админке\n3. Добавить админку\n4. Добавить листинг зарегистрированных пользователей и возможность их удаления</p>\n<a id=\"more\"></a>\n\n<h4>Организация API-endpoint</h4>\n<p>Есть несколько технологий по созданию API используя <code>Mongoose</code>. Можно использовать готовые модули, но нам нужно разобраться как же это работает,\nпоэтому сделаем все с нули сами. <em>Здесь следует отметить, что можно просто дать прямой доступ ко всем API интерфейсу Mongoose, и в целом это неплохая методика,\nкоторая позволит легче использовать один и тот же код на клиенте и на сервере, но об этом в других постах.</em>\nИтак, начнем мы с простого. Добавляем методы в <code>models/User.js</code> и настраиваем соответствующие руты:</p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>routes.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td><td class=\"code\"><pre>...\n<span class=\"comment\">// у нас есть доступ к app, так код выполняется внутри соответствующей функции</span>\n<span class=\"comment\">// маунтим все запросы по /api/v.1/:model/: и добавляем обработчик</span>\n<span class=\"comment\">// саму функцию можно вынести в контроллеры, но пока этого не делаем, чтобы сохранить наглядность</span>\napp.all(<span class=\"string\">'/api/v.1/:model/*'</span>, <span class=\"keyword\">function</span>(req,res,next){\n    <span class=\"keyword\">var</span> method = req.method.toLowerCase(),\n        modelName  = req.params.model,\n        getParams = req.path.split(<span class=\"string\">\"/\"</span>).splice(<span class=\"number\">0</span>,<span class=\"number\">4</span>); <span class=\"comment\">// убираем 4 параметра, как нерелевантные для нас, остальное передаем</span>\n\n    <span class=\"keyword\">try</span> {\n        <span class=\"keyword\">var</span> model = require(<span class=\"string\">\"./models/\"</span>+modelName);\n\n        <span class=\"comment\">// добавляем getParams</span>\n        req.getParams = getParams;\n        model[method](req,res,next);\n    } <span class=\"keyword\">catch</span> (e) {\n        <span class=\"comment\">// если модуля или метода нет, то возвращаем ошибку</span>\n        next(e);\n    }\n}, <span class=\"keyword\">function</span>(err,req,res,next){\n   <span class=\"comment\">// здесь ловим ошибки</span>\n\n   <span class=\"keyword\">if</span> ( err ) {\n        <span class=\"comment\">// произошла ошибка - вернем ее, в дальнейшем лучше не возвращать ошибки пользователю напрямую</span>\n        res.json({error: err}, <span class=\"number\">400</span>);\n   } <span class=\"keyword\">else</span> {\n        <span class=\"comment\">//  все хорошо, но пользователю решили ничего не отдавать</span>\n        res.json({success: <span class=\"literal\">true</span>});\n   }\n});\n\n...\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><figcaption><span>models.User.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n</pre></td><td class=\"code\"><pre>...\n\nUser.statics.get = <span class=\"keyword\">function</span>(req,res,next){\n\n    <span class=\"comment\">// Следует отметить, что таким образом у всех пользователей есть доступ ко ВСЕМ</span>\n    <span class=\"comment\">// данным объекта, поэтому следует добавить разграничение доступа и/или убирать данные, которые не должны</span>\n    <span class=\"comment\">// быть доступны всем</span>\n\n    <span class=\"keyword\">var</span> id = req.getParams[<span class=\"number\">0</span>];\n\n    <span class=\"keyword\">if</span> ( id != <span class=\"literal\">null</span> ) {\n        <span class=\"keyword\">this</span>.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span><span class=\"params\">(err, user)</span>{</span>\n           <span class=\"comment\">// если ошибка</span>\n           <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n           <span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> res.send(<span class=\"number\">404</span>);\n\n           <span class=\"comment\">// TODO: не безопасно, но пока сойдет</span>\n           res.json(user);\n        });\n    } <span class=\"keyword\">else</span> {\n        <span class=\"keyword\">try</span> {\n            <span class=\"keyword\">var</span> query = JSON.parse(req.query.q || <span class=\"string\">\"{}\"</span>),\n                options = JSON.parse(req.query.o || <span class=\"string\">\"{}\"</span>);\n\n            <span class=\"keyword\">this</span>.find(query, options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span><span class=\"params\">(err, users)</span>{</span>\n                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n\n                <span class=\"comment\">// TODO: не безопасно, но пока сойдет</span>\n                res.json(users || []);\n            }\n        } <span class=\"keyword\">catch</span> (e) {\n            next(e);\n        }\n    }\n\n};\n\nUser.statics.post = <span class=\"keyword\">function</span>(req,res,next){\n\n    <span class=\"keyword\">var</span> userData = req.body;\n\n    <span class=\"comment\">// не делаем валидацию, этим займется Mongoose</span>\n    <span class=\"comment\">// в дальнейшем можно добавить кастомные проверки помимо валидации и уникальных индексов</span>\n    <span class=\"keyword\">this</span>.create(userData, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span><span class=\"params\">(err, user)</span>{</span>\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n        res.json(user);\n    });\n};\n\nUser.statics.<span class=\"keyword\">delete</span> = <span class=\"keyword\">function</span>(req,res,next){\n\n    <span class=\"comment\">// здесь для примера добавлю проверку кто же есть наш пользователь</span>\n    <span class=\"keyword\">if</span> ( !req.session.user || req.session.user.isAdmin !== <span class=\"literal\">true</span>) {\n        <span class=\"keyword\">return</span> res.send(<span class=\"number\">403</span>);\n    }\n\n    <span class=\"keyword\">var</span> id = req.getParams[<span class=\"number\">0</span>];\n\n    <span class=\"keyword\">if</span> ( id != <span class=\"literal\">null</span> ) {\n        <span class=\"keyword\">this</span>.remove(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span><span class=\"params\">(err)</span>{</span>\n           <span class=\"comment\">// если ошибка</span>\n           <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n           res.send(<span class=\"number\">200</span>);\n        });\n    } <span class=\"keyword\">else</span> {\n        <span class=\"keyword\">try</span> {\n            <span class=\"keyword\">var</span> query = JSON.parse(req.query.q || <span class=\"string\">\"{}\"</span>);\n\n            <span class=\"keyword\">this</span>.remove(query, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span><span class=\"params\">(err)</span>{</span>\n                <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n                res.send(<span class=\"number\">200</span>);\n            }\n\n        } <span class=\"keyword\">catch</span> (e) {\n            next(e);\n        }\n    }\n};\n\n...\n</pre></td></tr></table></figure>\n\n<p><br/>\nПо аналогии можно будет организовывать API и для других моделей</p>\n<h4>Добавление суперюзера в SPA</h4>\n<p>Проделаем данную операцию при инициализации модели <code>User</code></p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>models/User.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre>...\n\n<span class=\"keyword\">var</span> model = mongoose.model(<span class=\"string\">\"User\"</span>, User);\n<span class=\"keyword\">var</span> superUser = {\n    username: <span class=\"string\">\"root\"</span>,\n    password: <span class=\"string\">\"&lt;заранее генерированный хеш&gt;\"</span>,\n    isAdmin: <span class=\"literal\">true</span>\n};\n<span class=\"comment\">// так как у нас есть уникальный индекс, то при рестарте приложения новый юзер не будет создаваться,</span>\n<span class=\"comment\">// а будет возвращаться ошибка - это не существенно</span>\nmodel.create(superUser);\n\nmodule.exports = model;\n</pre></td></tr></table></figure>\n\n<h4>Админка</h4>\n<p>То как сверстать шаблоны я описывать не буду - это достаточно простое занятие.\nМы добавим рут и соответствующий контроллер. Вход будет разрешен только супер-пользователю.\nОн сможет просматривать список зарегистрированных пользователей и удалять их.</p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>middleware/session.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre>\nexports.adminOnly = <span class=\"keyword\">function</span>(req,res,next){\n  <span class=\"keyword\">if</span> (req.session.user && req.session.user.isAdmin) <span class=\"keyword\">return</span> next();\n\n  <span class=\"comment\">// если доступа нет</span>\n  res.send(<span class=\"string\">\"Нет доступа\"</span>, <span class=\"number\">403</span>);\n};\n</pre></td></tr></table></figure>\n\n<p>Модифицируем старую страницу, здесь есть пример того как ограничивать доступ к определенным частям приложений только администратору.\nНам следует добавить аналогичные ограничения в <code>GET</code>, <code>DELETE</code> запросы у модели <code>Users</code>.</p>\n<figure class=\"highlight lang-javascript\"><figcaption><span>routes.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> sessionMiddleware = require(<span class=\"string\">\"./middleware/session\"</span>);\n...\n\napp.get(<span class=\"string\">'/admin'</span>, sessionMiddleware.adminOnly, require(<span class=\"string\">\"./controllers/admin\"</span>).get);\n\n...\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><figcaption><span>controllers/admin.js</span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> User = require(<span class=\"string\">\"../models/User.js\"</span>);\n\nexports.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(req, res, next)</span> {</span> <span class=\"comment\">//для возможности вызова  из другого файла</span>\n    <span class=\"comment\">// отдадим в страничку для рендера</span>\n    <span class=\"keyword\">var</span> context = {};\n\n    <span class=\"comment\">// получаем весь список сразу, если он будет большим, можно добавить лимит, инфинит</span>\n    <span class=\"comment\">// скроллинг, добавить стриминг (здорово экономит память - полезно, когда нужно обработать несколько тысяч объектов)</span>\n    User.find({}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userCallback</span><span class=\"params\">(err, users)</span>{</span>\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> next(err);\n\n        context.users = users;\n\n        <span class=\"comment\">// очередная полезная функция express.js</span>\n        <span class=\"comment\">// передает контекст в template engine -- тут мы можем выбрать все что нашей душе угодно</span>\n        <span class=\"comment\">// я пропагандирую DoT.JS - лучшего решения пока не нашел</span>\n        res.render(<span class=\"string\">\"&lt;шаблон для рендера&gt;\"</span>, context);\n    });\n}\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-html\"><figcaption><span>admin.dot </span></figcaption><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n</pre></td><td class=\"code\"><pre><span class=\"comment\">&lt;!-- привожу только вырезку интересных моментов --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span>\n\n    <span class=\"comment\">&lt;!-- не забываем подключить jquery, до фреймворков пока не доходит дело --&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"/path/to/jquery\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n\n<span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span>\n    <span class=\"comment\">&lt;!-- partials пока не используем, лэйаутов базовых тоже нет --&gt;</span>\n\n    <span class=\"comment\">&lt;!-- выводим список юзеров --&gt;</span>\n    <span class=\"comment\">&lt;!-- использую одинарные { }, дабы статический генератор не пытался обработать их,\n         в реальности по умолчанию используются двойные фигурные скобки --&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">ul</span>&gt;</span>\n        {~ it.users: user }\n        <span class=\"tag\">&lt;<span class=\"title\">li</span>&gt;</span>\n            {= user.username }\n            <span class=\"tag\">&lt;<span class=\"title\">button</span> <span class=\"attribute\">data-id</span>=<span class=\"value\">'{ = user._id }'</span> <span class=\"attribute\">class</span>=<span class=\"value\">'delete'</span>&gt;</span>[x]<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"title\">li</span>&gt;</span>\n        {~}\n    <span class=\"tag\">&lt;/<span class=\"title\">ul</span>&gt;</span>\n\n\n    <span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">\n        $(<span class=\"keyword\">function</span>() { <span class=\"comment\">//Когда DOM готов</span>\n          $(<span class=\"string\">\".delete\"</span>).click(<span class=\"keyword\">function</span>(event){ <span class=\"comment\">// отслеживаем ивент по нажатию на кнопку delete</span>\n        \t  <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>); <span class=\"comment\">// создаем ссылку на $this</span>\n        \t  $.ajax({\n        \t     url: <span class=\"string\">\"/api/v.1/Users/\"</span>+$<span class=\"keyword\">this</span>.data(<span class=\"string\">\"id\"</span>),\n        \t     type: <span class=\"string\">\"DELETE\"</span>,\n        \t     success: <span class=\"keyword\">function</span>(response){\n                    $<span class=\"keyword\">this</span>.parent().remove();\n        \t     },\n        \t     error: <span class=\"keyword\">function</span>(response){\n        \t        alert(<span class=\"string\">\"ошибка\"</span>);\n        \t     }\n        \t  });\n        \t});\n        });\n    </span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span>\n</pre></td></tr></table></figure>\n\n\n\n<h4>Выводы</h4>\n<p>На примере данных задач мы научились делать следующие вещи:\n1. Создавать <code>RESTful API</code>\n2. Разграничивать доступ к функционалу приложения\n3. Вешать обработчики событий и отправлять запросы к серверу\n4. Немного манипуляций с DOM</p>\n","excerpt":589,"source":"_posts/Deleting.md","slug":"Deleting","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"5":{"id":0,"title":"Angular.JS: основы создания директив","subtitle":"концепции и практическое применение","author":"Дмитрий Горбунов","gravatarMail":"atskiisotona@gmail.com","date":"2013-08-17T00:00:00.000Z","updated":"2013-08-18T22:44:33.000Z","categories":[],"tags":[5],"comments":true,"layout":"post","content":"<h2>Подготовка</h2>\n<h3>Модульная структура</h3>\n<p>Как я уже писал ранее, AngularJS является достаточно структурированной библиотекой. Практически каждый элемент функциональности выделен в свой модуль: $http, $resource, $route, $location и так далее. Фактически сама библиотека сконцентрирована в модуле Core. Подключать его не нужно (как и многие другие модули, вроде $http), поскольку он входит в основу библиотеки.</p>\n<p>Начиная с версии 1.1.6 модуль $route нужно подключать отдельно, поскольку было принято решение исключить его из ядра и впоследствии объединить с модулем ui.state от команды AngularUI.</p>\n<h3>Расширение функциональности</h3>\n<p>Следует заметить, что вызов <code>angular.module</code> может работать по-разному в зависимости от переданных ему параметров. Если переданное первым параметром имя модуля соответствует уже существующему модулю, то вызов вернёт ссылку <em>на этот модуль</em>, если же такого модуля нет, то он предварительно <em>будет создан</em>.</p>\n<p>Это позволяет держать код в разных файлах и не заботиться о последовательности их подключения/склейки. Достаточно лишь в начале каждого файла написать</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> myModule = angular.module(<span class=\"string\">\"MyModule\"</span>)\n</pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>Разумеется, можно подключать и зависимости, их наличие не влияет на работу функции <code>angular.module</code>.</p>\n<h3>Настройка модуля</h3>\n<p>Каждый модуль ведёт себя как полноценный элемент приложения и сам может являться приложением (об этом говорилось ранее). Разумеется, что модули можно настраивать, меняя их поведение в зависимости от ситуации. Для этого предназначено две функции:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre>myModule.run(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"comment\">// код, находящийся здесь, будет выполнен на этапе создания модуля</span>\n    <span class=\"comment\">// сразу после того, как будут подгружены все зависимости</span>\n\n    <span class=\"comment\">// например, здесь можно запросить с сервера данные, важные для всего модуля</span>\n})\n\nmyModule.config(<span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// в этой функции можно настроить поведение провайдеров</span>\n    <span class=\"comment\">// крайне важная функция, к ней мы ещё вернёмся</span>\n})\n</pre></td></tr></table></figure>\n\n<h2>Провайдер</h2>\n<p>Провайдеры являются фабриками классов. Они создают готовые объекты, которые можно внедрять с помощью DI. Провайдеры являются основным способом расширения функциональности AngularJS. По своей сути, провайдер представляет собой объект, в котором находится единственная обязательная функция с строго регламентированным именем: <code>$get</code>.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someProvider</span><span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">this</span>.$get = <span class=\"keyword\">function</span>() {\n        <span class=\"keyword\">return</span> <span class=\"number\">42</span>\n    }\n}\n</pre></td></tr></table></figure>\n\n<p>Помимо того, провайдер может включать любые методы, с помощью которых можно настроить создание объектов. Объекты, создаваемые провайдером, обычно называются <em>сервисы</em>.</p>\n<p>Функция <code>$get</code> вызывается инъектором в процессе внедрения зависимостей. Поэтому если написать её тем или иным способом, то можно получить разные результаты: например, всякий раз будет создаваться новый объект, а может и отдаваться ссылка на один и тот же общий. Второй вариант широко применяется для обмена данными между разными частями приложения/модуля.</p>\n<p>Для доступа к самому провайдеру следует добавить к имени сервиса слово <code>Provider</code>. Например, <code>$httpProvider</code>. Следует заметить, что далеко не у всех сервисов есть свой отдельный провайдер, к которому можно получить доступ, как в примере выше.</p>\n<h3>Константа</h3>\n<p>Константа — это сервис, представляющий собой некую константу. Пример такого сервиса можно увидеть выше. Однако в AngularJS существуют функции для более удобного создания объектов, не имеющих отдельного провайдера, который не нужно настраивать. Для создания сервиса, отдающего некую константу, можно воспользоваться функцией <code>module.value</code>, выглядит это так:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>myModule.value(<span class=\"string\">\"TheAnswer\"</span>, <span class=\"number\">42</span>)\n</pre></td></tr></table></figure>\n\n<p>Эта запись эквивалентна следующей:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someProvider</span><span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">this</span>.$get = <span class=\"keyword\">function</span>() {\n        <span class=\"keyword\">return</span> <span class=\"number\">42</span>\n    }\n}\n\nmyModule.provide(<span class=\"string\">\"TheAnswer\"</span>, someProvider)\n</pre></td></tr></table></figure>\n\n<p>С той лишь разницей, что сокращённая запись не позволяет обращаться к <code>TheAnswerProvider</code> за ненадобностью. В качестве константы выступать может что угодно, главное не забывать, что это всегда будет одно и то же значение. Попробуйте проверить, что будет, если в качестве константы задать объект и менять его свойства из разных частей приложения.</p>\n<h3>Фабрика</h3>\n<p>Фабрика это усложнённый вариант константы. Фабрика позволяет не только вернуть некоторое значение, но ещё и предварительно выполнить некоторые действия.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre>myModule.factory(<span class=\"string\">\"TheObject\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(TheAsnwer)</span> {</span>\n    <span class=\"keyword\">var</span> obj = {\n        property1: <span class=\"number\">1</span>,\n        property2: <span class=\"number\">2</span>,\n        answer: TheAnswer\n    }\n\n    obj.property3 = obj.property1 + obj.property2\n\n    <span class=\"keyword\">return</span> obj\n})\n</pre></td></tr></table></figure>\n\n<p>Обратите внимание, что я внедрил TheAsnwer в фабрику. Так же можно подключать любые зависимости. Сервисы могут и должны зависеть друг от друга.</p>\n<p>Таким образом, я могу менять в некоторой степени поведение фабрики <code>TheObject</code>, поскольку она зависит от <code>TheAnswer</code>. Но лишь в некоторой степени.</p>\n<h3>Сервис</h3>\n<p>Сервис это фабрика, которая всякий раз возвращает новый объект. Иными словами, запись</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre>myModule.factory(<span class=\"string\">\"TheService\"</span>, <span class=\"keyword\">function</span>(TheObject) {\n    <span class=\"keyword\">var</span> service = <span class=\"keyword\">function</span>(obj) {\n        <span class=\"keyword\">this</span>.obj = obj\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> service(TheObject)\n})\n</pre></td></tr></table></figure>\n\n<p>Можно сократить до</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">service</span> <span class=\"params\">(TheObject)</span> {</span>\n    <span class=\"keyword\">this</span>.obj = TheObject\n}\n\nmyModule.service(<span class=\"string\">\"TheService\"</span>, service)\n</pre></td></tr></table></figure>\n\n<p>Но что если в этом случае мы хотим менять передаваемый в процессе создания сервиса параметр? В этом случае нам и нужен полноценный провайдер.</p>\n<h3>Провайдер</h3>\n<p>В сущности, AngularJS все вышеописанные методы реализует через вызов <code>module.provider</code>, они нужны лишь для удобства и сокращения записи. Полноценный сервис с провайдером же выглядит так:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"code\"><pre>myModule.provider(<span class=\"string\">\"TheService\"</span>, <span class=\"keyword\">function</span>(TheObject) {\n    <span class=\"keyword\">var</span> o = TheObject\n\n    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">service</span> <span class=\"params\">(obj)</span> {</span>\n        <span class=\"keyword\">this</span>.obj = obj\n    }\n\n    <span class=\"keyword\">this</span>.setInitiator = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(initiator)</span> {</span>\n        o = initiator\n    }\n\n    <span class=\"keyword\">this</span>.$get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> service(o)\n    }\n})\n</pre></td></tr></table></figure>\n\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> anotherModule = angular(<span class=\"string\">\"AnotherModule\"</span>, [<span class=\"string\">\"MyModule\"</span>])\n\nanotherModule.configure([<span class=\"string\">\"TheServiceProvider\"</span>, <span class=\"keyword\">function</span>(TheServiceProvider) {\n    TheServiceProvider.setInitiator({\n        name: <span class=\"string\">\"another value\"</span>\n    })\n}])\n\nanotherModule.run(<span class=\"keyword\">function</span>(TheService) {\n    console.log(TheService.obj)\n\n    <span class=\"comment\">// выведет { name: \"another value\" }</span>\n})\n</pre></td></tr></table></figure>\n\n<h2>Директивы</h2>\n<p>Хорошо, но что если нам нужно не только сделать какой-то сервис или модуль. Что если мы хотим реализовать что-то подобное директиве ngRepeat? Разумеется, AngularJS позволяет делать и это.</p>\n<h3>$parse и $compile</h3>\n<p>Рассмотрим, что AngularJS делает, когда встречает:</p>\n<ol>\n<li>Выражение</li>\n<li>DOM</li>\n</ol>\n<h4>$parse</h4>\n<p>Эта функция превращает любое допустимое выражение AngularJS в <em>функцию</em>. Эту функцию затем можно вызвать, передав в неё 1 или 2 параметра:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> expr = $parse(<span class=\"string\">\"user.data\"</span>)\nconsole.log(expr($scope))\n<span class=\"comment\">// если $scope.user.data имеет значение, то оно будет выведено в консоль</span>\n</pre></td></tr></table></figure>\n\n<p>Вторым параметром можно передать локальные переменные, с помощью которых можно временно переопределить переменные внутри контекста — первого параметра.</p>\n<p>Именно с помощью этой функции AngularJS и осуществляет связывание данных и вообще всё, что использует выражения.</p>\n<p>В ваших приложениях эта функция вам почти никогда не понадобится, но знать о её существовании полезно.</p>\n<h4>$compile</h4>\n<p>$compile делает то же самое, что и $parse, но для HTML. Например</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> template = $compile(<span class=\"string\">\"&lt;p&gt;&lt;/p&gt;\"</span>)\nconsole.log(template({name: <span class=\"string\">\"Ivan\"</span>}))\n<span class=\"comment\">// выведет &lt;p&gt;Ivan&lt;/p&gt;</span>\n</pre></td></tr></table></figure>\n\n<p>То есть это часть шаблонизатора AngularJS, осуществляющая привязку области видимости к шаблону.</p>\n<p>Эта функция тоже вряд ли вам понадобится, но опять же знать о её существовании полезно.</p>\n<h3>Первая директива</h3>\n<p>Теперь, когда мы знаем, как AngularJS обрабатывает выражения и HTML, можно попробовать написать первую директиву. Я не буду описывать все возможные параметры, опишу лишь те, что обычно используются.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre>myModule.directive(<span class=\"string\">\"greet\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">return</span> {\n        template: <span class=\"string\">\"&lt;p&gt;Привет, &lt;/p&gt;\"</span>,\n        replace: <span class=\"literal\">true</span>,\n        scope: {},\n\n        link: <span class=\"keyword\">function</span>(scope, element, attributes) {\n            scope.name = <span class=\"string\">\"Иван\"</span>\n        }\n    }\n})\n\n&lt;div greet&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n<p>В результате работы этой директивы вместо <code>&lt;div&gt;</code> будет выведено <code>&lt;p&gt;Привет, Иван&lt;/p&gt;</code>. Параметр <code>replace</code> позволяет определить, будет ли директива целиком замещать DOM, которому применена, или же встраиваться внутрь него. Параметр <code>template</code> можно заменить на <code>templateUrl</code> и подключать шаблон из файла.</p>\n<p>Наиболее важными параметрами здесь являются <code>scope</code> и <code>link</code>. Последний — это функция, осуществляющая привязку <code>scope</code> к шаблону (см. выше про <code>$compile</code>). Ну а <code>scope</code> позволяет изолировать область видимости внутри директивы. Эти два параметра следует указывать практически всегда.</p>\n<p>Есть также параметр <code>compile</code>, который позволяет задать обработчик шаблона перед связыванием его с <code>link</code>, но он используется довольно редко.</p>\n<h4>Процесс компиляции в AngularJS</h4>\n<ol>\n<li>Сначала шаблон парсится стандартными средствами браузера. Важно понять, что шаблон должен быть допустимым HTML, иначе ничего не заработает.</li>\n<li>Вызывается <code>$compile</code>, который обрабатывает выражения и составляет список обнаруженных директив. Директивы для каждого тега сортируются в порядке важности (его можно указывать при разработке директивы), затем вызываются функции <code>compile</code> у каждой из директив. В этих функциях директива имеет возможность изменить DOM по своему усмотрению. Результатом этого этапа будет одна общая функция линковки, включающая в себя также и все функции <code>link</code> директив.</li>\n<li>Вызывается функция, полученная на этапе 2, которая в свою очередь вызывает функции <code>link</code> всех директив, которые могут привязывать обработчики событий и т.д.</li>\n<li>Получаем DOM с включенным двойным связыванием, который может динамически меняться.</li>\n</ol>\n<p>Директива практически всегда имеет функцию <code>link</code> и практически всегда не имеет функции <code>compile</code>.</p>\n<h3>Полный код создания директивы</h3>\n<p>Хотя для простоты вы можете вообще возвращать в <code>angular.directive</code> функцию <code>link</code>:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre>myModule.directive(<span class=\"string\">\"simple\"</span>, <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(scope, element, attributes) {}\n})\n</pre></td></tr></table></figure>\n\n<p>Это используется довольно редко. Чаще всего используется вариант из раздела «Первая директива». Однако есть и максимально полный вариант.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n</pre></td><td class=\"code\"><pre>myModule.directive(<span class=\"string\">'directiveName'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factory</span><span class=\"params\">(injectables)</span> {</span>\n    <span class=\"keyword\">var</span> directiveDefinitionObject = {\n        <span class=\"comment\">// приоритет директивы (см. выше)</span>\n        priority: <span class=\"number\">0</span>,\n        <span class=\"comment\">// шаблон, заданный явно</span>\n        template: <span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>,\n        <span class=\"comment\">// шаблон, заданный в виде ссылки или выражения</span>\n        templateUrl: <span class=\"string\">'directive.html'</span>,\n        <span class=\"comment\">// заменять ли исходный DOM на шаблон</span>\n        replace: <span class=\"literal\">false</span>,\n        <span class=\"comment\">// включить ли некоторые части исходного DOM в шаблон</span>\n        transclude: <span class=\"literal\">false</span>,\n        <span class=\"comment\">// ограничить применение директивы</span>\n        restrict: <span class=\"string\">'A'</span>,\n        <span class=\"comment\">// создавать/не создавать замыкание области видимости</span>\n        scope: <span class=\"literal\">false</span>,\n        <span class=\"comment\">// контроллер для директивы</span>\n        controller: <span class=\"keyword\">function</span>($scope, $element, $attrs, $transclude, otherInjectables) {\n        },\n        <span class=\"comment\">// здесь можно изменять исходный DOM</span>\n        compile: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span><span class=\"params\">(tElement, tAttrs, transclude)</span> {</span>\n            <span class=\"keyword\">return</span> {\n                pre: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preLink</span><span class=\"params\">(scope, iElement, iAttrs, controller)</span> {</span>},\n                post: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postLink</span><span class=\"params\">(scope, iElement, iAttrs, controller)</span> {</span>}\n            }\n        },\n        <span class=\"comment\">// здесь находится основная функциональность директивы</span>\n        link: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">postLink</span><span class=\"params\">(scope, iElement, iAttrs)</span> {</span>\n        }\n    }\n    <span class=\"keyword\">return</span> directiveDefinitionObject\n});\n</pre></td></tr></table></figure>\n\n<h4>Ограничение применимости</h4>\n<p>Поскольку в AngularJS существует несколько способов добавить директивы в DOM, вы можете отключить некоторые из них для вашей директивы. Если параметр <code>restrict</code> не задан, то директивы можно добавлять лишь в качестве атрибутов к элементам HTML. Другие возможные значения выглядят так:</p>\n<ul>\n<li>E: только в качестве собственного элемента DOM: <code>&lt;my-directive&gt;&lt;/my-directive&gt;</code></li>\n<li>A: в качестве атрибута: <code>&lt;div my-directive&gt;&lt;/div&gt;</code></li>\n<li>C: в качестве CSS-класса: <code>&lt;div class=&quot;my-directive: value&quot;&gt;&lt;/div&gt;</code></li>\n<li>M: в качестве комментария: <code>&lt;!-- directive: my-directive value --&gt;</code></li>\n</ul>\n<p>Эти значения можно комбинировать, например так: <code>restrict: &quot;AC&quot;</code>.</p>\n<h3>Изоляция области видимости</h3>\n<p>Изоляция области видимости обладает ещё одним крайне важным свойством: сокращение кода при получении параметров директивы. Рассмотрим уже известную директиву <code>greet</code>.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre>myModule.directive(<span class=\"string\">\"greet\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($parse)</span> {</span>\n    <span class=\"keyword\">return</span> {\n        template: <span class=\"string\">\"&lt;p&gt;Привет, &lt;/p&gt;\"</span>,\n        replace: <span class=\"literal\">true</span>,\n        scope: {},\n\n        link: <span class=\"keyword\">function</span>(scope, element, attributes) {\n            scope.name = $parse(attributes[<span class=\"string\">\"greet\"</span>])(scope)\n        }\n    }\n})\n\n&lt;div greet=<span class=\"string\">\"Иван\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n<p>Как видно, для извлечения нужного значения требуется проделать довольно некрасивую операцию. К счастью, в AngularJS это можно сделать намного проще.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre>myModule.directive(<span class=\"string\">\"greet\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($parse)</span> {</span>\n    <span class=\"keyword\">return</span> {\n        template: <span class=\"string\">\"&lt;p&gt;Привет, &lt;/p&gt;\"</span>,\n        replace: <span class=\"literal\">true</span>,\n        scope: {\n            greet: <span class=\"string\">\"@\"</span>\n        }\n    }\n})\n\n&lt;div greet=<span class=\"string\">\"Иван\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n<p>Добавив к замыканию области видимости свойство, имя которого совпадает с именем атрибута (а директива это тоже атрибут), а значением является <code>@</code>, можно автоматически передать значение атрибута в замыкание. Только обратите внимание, что в шаблоне имя переменной тоже поменялось. В таком простом случае функцию <code>link</code> вообще можно удалить, что и было сделано.</p>\n<p>Следует заметить, что если написать</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>&lt;div greet=<span class=\"string\">\"\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n<p>И определить <code>someName</code> где-то ещё, то директива заработает как и ожидается, но только в одну сторону. Можно поступить несколько иначе:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre>scope: {\n    greet: <span class=\"string\">\"=\"</span>\n}\n\n&lt;div greet=<span class=\"string\">\"someName\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n<p>Такая запись позволяет осуществлять полноценное двойное связывание между директивой и внешним миром. Например, вы можете добавить <code>&lt;input ng-model=&#39;greet&#39;&gt;</code> в шаблон директивы и наблюдать, как <code>someName</code> вне её будет успешно меняться при изменении значения в поле ввода.</p>\n<p>Существует и ещё более продвинутый вариант изоляции области видимости, позволяющий не только связывать данные, но и передавать функциональность из внешнего контроллера в директиву.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre>template: <span class=\"string\">\"&lt;button ng-click='greet()'&gt;Greet!&lt;/button&gt;\"</span>\nscope: {\n    greet: <span class=\"string\">\"&\"</span>\n}\n\n&lt;div greet=<span class=\"string\">\"sayHello()\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n\n&gt;&gt; Где-то в контроллере\n\n$scope.sayHello = function() { alert(\"Привет!\") }</span>\n</pre></td></tr></table></figure>\n\n<p>Однако и это ещё не всё. Мы можем передавать параметры методу, который вызывается из контроллера. Делается это довольно необычно:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre>template: <span class=\"string\">\"&lt;input ng-model='name'&gt;&lt;button ng-click='greet({name: name})'&gt;Greet!&lt;/button&gt;\"</span>\nscope: {\n    greet: <span class=\"string\">\"&\"</span>\n}\n\n&lt;div greet=<span class=\"string\">\"sayHello(name)\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n\n&gt;&gt; Где-то в контроллере\n\n$scope.sayHello = function(name) { alert(\"Привет, \" + name + \"!\") }</span>\n</pre></td></tr></table></figure>\n\n<p>Обратите внимание как передаются параметры в шаблоне директивы. Попробуйте создать две директивы и понаблюдать, как они будут работать независимо друг от друга:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n</pre></td><td class=\"code\"><pre>&lt;div greet=<span class=\"string\">\"sayHello(name)\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">greet</span>=<span class=\"value\">\"sayHello(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n<p>Вводимые в поле ввода имена будут уникальными для каждой директивы и не помешают друг другу, несмотря на несколько смущающую запись. <code>sayHello(name)</code> — параметр здесь это <em>имя свойства</em> объекта, передаваемого из директивы.</p>\n<p>Всё вышеописанное легко достигается вообще без использования функции <code>link</code>. Однако если вы хотите самостоятельно обрабатывать некие события браузера, она вам понадобится.</p>\n<h4>Что на самом деле делают @, =, &amp;?</h4>\n<p><strong>@</strong> создаёт одностороннее связывание данных из родительской области видимости.</p>\n<p><strong>=</strong> позволяет изолированному в области видимости идентификатору участвовать в связывании (обратите внимание, как сильно это отличается от @)</p>\n<p><strong>&amp;</strong> создаёт <em>делегат</em>. Если вы работали с C#, то знакомы с понятием делегата. Если же нет, то я рекомендую обратиться к другим источникам, хотя в общем-то для работы с AngularJS это и не обязательно.</p>\n<h3>Подмена</h3>\n<p>Предположим, что мы хотим создать директиву, показывающую диалоговое окно, внутри которого расположен произвольный HTML. В этом случае изоляции области видимости из атрибутов будет недостаточно. К счастью, AngularJS предлагает простую механику transclusion.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre>&lt;div dialog&gt;\n    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Диалог<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>Это диалог<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n\nangular.directive(\"dialog\", function () {\n    return {\n        template: \"<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">'dialog'</span> <span class=\"attribute\">ng-transclude</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\",\n        replace: true,\n        transclude: true,\n        scope: {}\n    }\n})</span>\n</pre></td></tr></table></figure>\n\n<p>Я намеренно опустил логику создания диалога и сильно упростил итоговый HTML в <code>template</code>. Для настоящей директивы понадобится добавить правильную разметку с кнопкой закрытия, кнопками действия (которые могут настраиваться через дополнительные атрибуты), повешать обработчики событий в функции <code>link</code> и т.д. Однако этот пример позволяет быстро понять, как пользоваться функцией подмены разметки.</p>\n<p><em>Важно</em>: содержимое тега с директивой ngTransclude <strong>будет сохранено</strong>. Новая разметка будет добавлена к нему.</p>\n<h3>Взаимодействие директив</h3>\n<p>Директивы могут взаимодействовать друг с другом с помощью контроллеров. Одна директива может зависеть от другой и вызывать методы и свойства её контроллера.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td><td class=\"code\"><pre>myModule.directive(<span class=\"string\">\"capital\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">return</span> {\n        scope: {\n            capital: <span class=\"string\">\"@\"</span>\n        },\n        controller: <span class=\"keyword\">function</span>($scope) {\n            $scope.tell = <span class=\"keyword\">function</span>() {\n                console.log($scope.capital)\n            }\n        }\n    }\n})\n\nmyModule.directive(<span class=\"string\">\"country\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">return</span> {\n        require: <span class=\"string\">\"capital\"</span>,\n        scope: {\n            country: <span class=\"string\">\"@\"</span>\n        },\n        <span class=\"comment\">// имя capitalController не важно, внедрение происходит</span>\n        <span class=\"comment\">// через require</span>\n        link: (scope, element, attributes, capitalController) {\n            console.log(scope.country + <span class=\"string\">\" — \"</span> + capitalController.tell())\n        }\n    }\n})\n\n&lt;div country=<span class=\"string\">\"Россия\"</span> capital=<span class=\"string\">\"Москва\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></span>\n</pre></td></tr></table></figure>\n\n","excerpt":1392,"source":"_posts/AngularJSAdvanced.md","slug":"AngularJSAdvanced","ctime":"2013-08-18T22:44:33.000Z","mtime":"2013-08-18T22:44:33.000Z"},"6":{"id":0,"title":"Стилистические требования к написанию программного кода","subtitle":"пишите поддерживаемый код","author":"Дмитрий Горбунов","gravatarMail":"atskiisotona@gmail.com","date":"2013-10-03T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[10,11,31],"comments":true,"layout":"post","content":"<p>Ни для кого нет секрета в том, что поддерживать крупные проекты достаточно сложно.\nОсобенно если в работе участвуют несколько программистов. Теперь представим ситуацию, в которой их десятки, они могут покидать проект,\nили потребуется ввести нового участника команды в курс дела. Если нет никаких правил, то очень быстр весь код проекта превратится\nв большую кашу, и изменить что-либо в нем будет очень накладно.</p>\n<p>На помощь приходят правила написания кода. У каждой компании они отличаются, но обязательно существуют, если они хотя бы чего-то стоят.\nВ Makeomatic мы верим в то, что открытые знания позволят сделать мир лучше, клиентов доверчивее, ну и, конечно же, привлекут еще\nбольше сотрудников в наш дружный коллектив.\n<a id=\"more\"></a></p>\n<h2>Общие положения</h2>\n<p>Все комментарии, названия, описания, документация ведутся только на английском языке для работ на заказ и только на русском языке для внутренних проектов.</p>\n<h3>Разбивка по модулям</h3>\n<p>Каждый логический объект кода должен находиться в отдельном файле, далее называемом модулем. Модуль должен содержать не более одного логического объекта. Это может быть класс, функция или даже константа. Всё зависит от назначения объекта. Примерами модулей являются:</p>\n<ul>\n<li>Контроллер Express.js</li>\n<li>Модуль Node.js</li>\n<li>Плагин yb-processor</li>\n<li>Middleware yb-server</li>\n<li>Контроллер yb-client</li>\n</ul>\n<h3>Оформление модуля</h3>\n<p>Каждый модуль должен начинаться с комментария, в котором должны быть указаны:</p>\n<ol>\n<li>Имя первоначального автора модуля</li>\n<li>Дата создания модуля</li>\n<li>Назначение и краткое описание модуля</li>\n<li>Место модуля в иерархии</li>\n<li>Лицензия, под которой распространяется модуль (если отличается от лицензии вышестоящего в иерархии объекта)</li>\n</ol>\n<p>Примером правильно оформленного начала модуля является такой заголовок модуля CoffeeScript:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"comment\">###\n\tDmitry Gorbunov &lt;atskiisotona@gmail.com&gt;\n\t8/11/2013 8:21:35 PM\n\n\tThis plugin fetches user profiles from ark.com and populates message with them.\n\tThis plugin belongs to yb-processor project.\n###</span>\n</pre></td></tr></table></figure>\n\n<h3>Общие правила оформления кода</h3>\n<p><strong>Обязательно использование символов табуляции для отбивки кода, за пробелы кастрирую без суда и следствия.</strong></p>\n<p>Причины:</p>\n<ul>\n<li>Легче форматировать</li>\n<li>Легче редактировать на удалённом сервере</li>\n<li>Можно настроить ширину табуляции по своему вкусу</li>\n</ul>\n<h2>JavaScript</h2>\n<h3>Общие правила</h3>\n<p>Комментарии записываются <em>перед</em> объектом, который нуждается в комментировании. Многострочные комментарии используются в заголовке файла и в тех случаях, когда оформляется JSDoc, в остальных случаях используется пара символов «/» для комментирования, даже в тех случаях, когда комментарий многострочный.</p>\n<p>Текст комментария должен быть отделён одним пробелом от символа комментария.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre><span class=\"comment\">/*\n\tI'm file header, see above for more info\n*/</span>\n\n<span class=\"comment\">// This is some code that does some work</span>\n<span class=\"comment\">// And this commentary is multi-line</span>\n<span class=\"keyword\">var</span> a = someFunc()\n\n<span class=\"comment\">/**\n * JSDoc commentary\n */</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someFunc</span><span class=\"params\">()</span> {</span>\n}\n</pre></td></tr></table></figure>\n\n<h4>Использование пробела</h4>\n<p>Пробел ставится:</p>\n<ul>\n<li>В однострочных массивах и объектах после открывающей и перед закрывающей скобками</li>\n<li>Между именем функции и списком параметров (если функция анонимна, то между словом <code>function</code> и списком параметров)</li>\n<li>Всегда после запятой, кроме случаев, когда следующий элемент списка записывается с новой строки</li>\n<li>Вокруг бинарных операторов (арифметические, логические, оператор присваивания)</li>\n<li>После двоеточия в описаниях объектов</li>\n</ul>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> a = { test: <span class=\"number\">1</span> }\n<span class=\"keyword\">var</span> b = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ]\n<span class=\"keyword\">var</span> c = <span class=\"number\">2</span> + <span class=\"number\">3</span>\n<span class=\"keyword\">var</span> d = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(a, b)</span> {</span>\n\t<span class=\"keyword\">return</span> a + b\n}\n</pre></td></tr></table></figure>\n\n<p>Пробел <em>не</em> ставится</p>\n<ul>\n<li>В списке параметров функции после открывающей и перед закрывающей скобками</li>\n<li>Для выравнивания переменных в столбцах</li>\n<li>При вызове функций</li>\n</ul>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// плохо</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">( a, b )</span> {</span> <span class=\"keyword\">return</span> a + b }\n\n<span class=\"comment\">// ужасно</span>\n<span class=\"keyword\">var</span> a   = <span class=\"number\">5</span>\n<span class=\"keyword\">var</span> bcf = <span class=\"number\">7</span>\n<span class=\"keyword\">var</span> b   = someFunc (a, bcf)\n</pre></td></tr></table></figure>\n\n<h4>Перевод строки</h4>\n<p>Символ перевода строки ставится:</p>\n<ul>\n<li>После открывающей фигурной или квадратной скобки в описаниях массивов, объектов, при ограничении области видимости или группировке операторов за исключением однострочных объектов и массивов</li>\n<li>Между операторами и выражениями (т.о. каждая строка должна содержать не более одного оператора/выражения)</li>\n<li>Между элементами длинных списков при записи массивов, параметров функций, объектов</li>\n</ul>\n<p>Пустая строка ставится между:</p>\n<ul>\n<li>Двумя определениями функций</li>\n<li>Логически раздельными участками кода</li>\n<li>По усмотрению автора</li>\n</ul>\n<h4>Использование символа «;»</h4>\n<p>Использование символа «точка с запятой» в JS допустимо лишь в единственном случае: разделение операторов или выражений, записанных в одну строку.</p>\n<p>Использование точки с запятой в конце строк в модулях JS <strong>запрещено</strong>.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre>\t<span class=\"comment\">// запрещено</span>\n\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;\n\t<span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t\t<span class=\"keyword\">return</span> <span class=\"number\">5</span>;\n\t}\n\n\t<span class=\"comment\">// разрешено</span>\n\t<span class=\"keyword\">var</span> a = <span class=\"number\">1</span>\n\t<span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n\t\t<span class=\"keyword\">return</span> <span class=\"number\">5</span>\n\t}\n</pre></td></tr></table></figure>\n\n<h4>Использование символа «,»</h4>\n<p>Данное правило касается оформления списков, в которых элементы разделяются запятыми. В случае если такой список оформляется с переносом каждого элемента на новую строку <strong>строго запрещается записывать символ «,» в начале строки перед следующим элементом списка</strong>.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// запрещено</span>\n<span class=\"keyword\">var</span> a = [\n\t<span class=\"number\">1</span>\n\t,<span class=\"number\">2</span>\n\t,<span class=\"number\">3</span>\n]\n\n<span class=\"comment\">// запрещено под страхом смерти из-за использования пробелов вместо табуляции</span>\n<span class=\"keyword\">var</span> a = [\n    <span class=\"number\">1</span>\n   ,<span class=\"number\">2</span>\n   ,<span class=\"number\">3</span>\n]\n\n<span class=\"comment\">// разрешено</span>\n<span class=\"keyword\">var</span> a = [\n\t<span class=\"number\">1</span>,\n\t<span class=\"number\">2</span>,\n\t<span class=\"number\">3</span>\n]\n</pre></td></tr></table></figure>\n\n<h4>Использование фигурных скобок</h4>\n<p>Фигурные скобки играют в JS три роли: ограничение области видимости, группировка операторов и описание объектов. Во всех случаях используется одинаковое оформление.</p>\n<p><strong>Открывающая фигурная скобка не должна быть «одинокой»</strong>.\n<strong>Закрывающая фигурная скобка должна быть «одинокой», если объект не однострочный или если после неё не идёт круглая или квадратная скобка</strong>.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// запрещено</span>\n<span class=\"keyword\">var</span> a =\n{\n}\n\n<span class=\"comment\">// запрещено</span>\n<span class=\"keyword\">var</span> a = {\n\ttest: <span class=\"number\">1</span>,\n\ttest2: <span class=\"number\">2</span>}\n\n<span class=\"comment\">// разрешено!</span>\n<span class=\"keyword\">var</span> a = { test: <span class=\"number\">1</span> }\n\n<span class=\"comment\">// разрешено</span>\n<span class=\"keyword\">var</span> a = {\n\ttest: <span class=\"number\">1</span>\n}\n</pre></td></tr></table></figure>\n\n<p>Открывающая фигурная скобка должна быть отделена пробелом от предыдущего символа, закрывающая должна быть лишь отбита нужным количеством символов табуляции. Если открывающей фигурной скобке предшествует квадратная или круглая, то пробел между ними не ставится. Аналогично пробел не ставится после закрывающей скобки, если сразу за ней идёт круглая или квадратная.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// плохо</span>\n<span class=\"keyword\">var</span> a ={}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span>{</span>}\n<span class=\"keyword\">var</span> b = [ {test:<span class=\"number\">1</span>}, {test:<span class=\"number\">2</span>\n} ]\n\n<span class=\"comment\">// хорошо</span>\n<span class=\"keyword\">var</span> a = {}\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>}\n<span class=\"keyword\">var</span> b = [{\n\ttest: <span class=\"number\">1</span>\n}, {\n\ttest: <span class=\"number\">2</span>\n}]\n</pre></td></tr></table></figure>\n\n<h5>Однострочные объекты</h5>\n<p>Использование однострочных объектов допустимо, когда такие объекты содержат не более одного поля. В остальных случаях нежелательно.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// допустимо, но нежелательно</span>\n<span class=\"keyword\">var</span> a = { test: <span class=\"number\">1</span>, test2: <span class=\"number\">2</span> }\n\n<span class=\"comment\">// разрешено</span>\n<span class=\"keyword\">var</span> a = { test: <span class=\"number\">1</span> }\n</pre></td></tr></table></figure>\n\n<p>В случае, когда объект передаётся как параметр функции и содержит более одного поля, также допускается запись такого объекта прямо в вызове функции в одну строку, однако рекомендуется всё же записывать такой объект на нескольких строках.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// допустимо</span>\n<span class=\"keyword\">var</span> a = someFunc({ test: <span class=\"number\">1</span>, test2: <span class=\"number\">2</span>, test3: <span class=\"number\">3</span>}, <span class=\"number\">1</span>)\n\n<span class=\"comment\">// тоже хороший вариант</span>\n<span class=\"keyword\">var</span> a = someFunc({\n\ttest: <span class=\"number\">1</span>,\n\ttest2: <span class=\"number\">2</span>,\n\ttest3: <span class=\"number\">3</span>\n}, <span class=\"number\">1</span>)\n\n<span class=\"comment\">// идеальный вариант</span>\n<span class=\"keyword\">var</span> b = {\n\ttest: <span class=\"number\">1</span>,\n\ttest2: <span class=\"number\">2</span>,\n\ttest3: <span class=\"number\">3</span>\n}\n<span class=\"keyword\">var</span> a = someFunc(b, <span class=\"number\">1</span>)\n</pre></td></tr></table></figure>\n\n<h5>Группировка операторов</h5>\n<p>При группировке операторов используются те же правила оформления фигурных скобок. При этом, даже если оператор в группе ровно один, он обязательно обрамляется фигурными скобками.</p>\n<figure class=\"highlight lang-JavaScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// плохо</span>\n<span class=\"keyword\">if</span> (a === <span class=\"literal\">true</span>)\n\t<span class=\"keyword\">return</span> <span class=\"string\">\"TRUE\"</span>\n\n<span class=\"comment\">// хорошо</span>\n<span class=\"keyword\">if</span> (a === <span class=\"literal\">true</span>) {\n\t<span class=\"keyword\">return</span> <span class=\"string\">\"TRUE\"</span>\n}\n</pre></td></tr></table></figure>\n\n<h3>Правила написания кода</h3>\n<h4>Имена переменных, функций, объектов</h4>\n<p>Всегда следует использовать camelCase, начиная имя с прописной буквы. Переменные не должны содержать в имени глаголы, функции же обязательно должны содержать глагол в названии, отражающий совершаемой ими действие.</p>\n<p>Запрещено давать бессмысленные имена. Каждое имя должно отражать назначение переменной или функции.</p>\n<h2>CoffeeScript</h2>\n<h3>Общие правила</h3>\n<p>Общие правила оформления совпадают с правилами для JavaScript, однако есть некоторые дополнения, связанные с особенностями синтаксиса.</p>\n<h3>Вызов функций</h3>\n<p>В случае, если производится вызов функции с единственным параметром, то он <em>никогда</em> не заключается в круглые скобки, даже если это однострочный объект. Сам однострочный объект при этом не обрамляется в фигурные скобки.</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># плохо</span>\nresult = someFunc({ param1: <span class=\"number\">1</span>, param2: <span class=\"string\">\"test\"</span> })\n\n<span class=\"comment\"># хорошо</span>\nresult = someFunc param1: <span class=\"number\">1</span>, param2: <span class=\"string\">\"test\"</span>\n</pre></td></tr></table></figure>\n\n<p>В случае, если параметров несколько, они также не обрамляются в круглые скобки. При этом объекты-параметры <em>всегда</em> обрамляются фигурными скобками.</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># плохо</span>\nresult = someFunc <span class=\"number\">1</span>, param1: <span class=\"number\">2</span>, param2: <span class=\"string\">\"test\"</span>\n\n<span class=\"comment\"># хорошо</span>\nresult = someFunc <span class=\"number\">1</span>, { param1: <span class=\"number\">2</span>, param2: <span class=\"string\">\"test\"</span> }\n</pre></td></tr></table></figure>\n\n<p>В случае, если функция в качестве одного из параметров принимает callback, используется следующая запись:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre>result = someFunc a, b, (error, result) -&gt;\n\t<span class=\"keyword\">if</span> error\n\t\tdoSomething()\n\t<span class=\"keyword\">else</span>\n\t\tdoAnotherThing(result)\n</pre></td></tr></table></figure>\n\n<p>Круглые скобки в вызове someFunc также не ставятся. В случае, если callback не является последним параметром, или если нужно добавить ещё один callback, используется следующая запись:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre>result = someFunc a, b, (result) -&gt;\n\t...\n, d\n\nresult = someFunc a, b,\n\t(result) -&gt;\n\t\t...\n\t(error) -&gt;\n\t\t...\n, d\n</pre></td></tr></table></figure>\n\n<p>Это единственный допустимый случай, когда запятая ставится в начале новой строки в списке параметров.</p>\n<h4>Вызов функций в выражениях</h4>\n<p>Во всех неочевидных случаях необходимо заключать параметры функций, участвующих в вычислении выражений, в круглые скобки.</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># здесь параметр нужно заключить в скобки, чтобы избежать неоднозначности</span>\n<span class=\"keyword\">if</span> someFunc(param) <span class=\"keyword\">is</span> <span class=\"literal\">true</span>\n\t...\n</pre></td></tr></table></figure>\n\n<p>Несмотря на то, что компилятор верно скомпилирует такое выражение:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">if</span> someFunc param <span class=\"keyword\">is</span> <span class=\"literal\">true</span>\n</pre></td></tr></table></figure>\n\n<p>человек — не компилятор, поэтому лучше избегать неоднозначностей, даже если они не приводят к логическим ошибкам на деле.</p>\n<h3>Условные операторы</h3>\n<p>Запрещается использование краткой формы условного оператора:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># плохо</span>\n<span class=\"keyword\">if</span> a <span class=\"keyword\">then</span> b\n\n<span class=\"comment\"># хорошо</span>\n<span class=\"keyword\">if</span> someVariable <span class=\"keyword\">is</span> <span class=\"literal\">true</span>\n\tdoSomething()\n</pre></td></tr></table></figure>\n\n<p>Запрещается использование <code>if not</code>:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># плохо</span>\n<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a\n\tb\n\n<span class=\"comment\"># хорошо</span>\n<span class=\"keyword\">unless</span> someVariable\n\tdoSomething()\n</pre></td></tr></table></figure>\n\n<p>Запрещается использование <code>is undefined</code> и <code>is null</code>. Следует использовать оператор существования: <code>if someVariable?</code>.</p>\n<p>Запрещается использовать обратные условия:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># плохо</span>\n<span class=\"keyword\">return</span> <span class=\"number\">5</span> <span class=\"keyword\">if</span> someVar &gt; <span class=\"number\">0</span>\n\n<span class=\"comment\"># хорошо</span>\n<span class=\"keyword\">if</span> someVar &gt; <span class=\"number\">0</span>\n\t<span class=\"keyword\">return</span> <span class=\"number\">5</span>\n</pre></td></tr></table></figure>\n\n<p>Часто возникает ситуация, когда в обработчике результата асинхронной операции нужно проверить наличие ошибки и вернуть какой-либо специальный результат в случае её наличия.</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># callback определён выше в области видимости</span>\n\n<span class=\"comment\"># первый вариант</span>\nasyncOperation (error, result) -&gt;\n\t<span class=\"keyword\">if</span> error\n\t\t<span class=\"keyword\">return</span> callback message: <span class=\"string\">\"An error occured\"</span>, info: error\n\n\t<span class=\"comment\"># some long code</span>\n\t...\n\n<span class=\"comment\"># второй вариант</span>\nasyncOperation (error, result) -&gt;\n\t<span class=\"keyword\">if</span> error\n\t\tcallback message: <span class=\"string\">\"An error occured\"</span>, info: error\n\t<span class=\"keyword\">else</span>\n\t\t<span class=\"comment\"># not so long code</span>\n\t\t...\n</pre></td></tr></table></figure>\n\n<h3>return</h3>\n<p>В общем случае, когда неочевидно, каков будет результат функции, следует ставить оператор <code>return</code>. В остальных случаях это не обязательно. Если в конце функции возвращается некий объект, массив или вообще переменная, следует предварить её оператором <code>return</code>. Если функция просто возвращает константу, предварять её оператором <code>return</code> не следует.</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n</pre></td><td class=\"code\"><pre><span class=\"comment\"># желательно использовать return для ясности</span>\n(param) -&gt;\n\tresult = []\n\t<span class=\"keyword\">for</span> key, value <span class=\"keyword\">of</span> param\n\t\t<span class=\"keyword\">if</span> key.indexOf(<span class=\"string\">\"tag\"</span>) &gt;= <span class=\"number\">0</span>\n\t\t\tresult.push(param)\n\t<span class=\"keyword\">return</span> result\n\n<span class=\"comment\"># здесь return не обязателен</span>\n-&gt;\n\t...\n\tdoSomething()\n\n<span class=\"comment\"># и здесь</span>\n-&gt;\n\t<span class=\"number\">5</span>\n\n<span class=\"comment\"># не забывайте, что результатом функции будет последний выполненный оператор</span>\n(a) -&gt;\n\t<span class=\"keyword\">if</span> a\n\t\tdoSomething()\n\t<span class=\"keyword\">else</span>\n\t\tdoAnotherThing()\n</pre></td></tr></table></figure>\n\n<h3>Короткие функции</h3>\n<p>Если функция входит в состав выражения, или передаётся в виде параметра, и её тело достаточно коротко, то её можно записать в одну строку:</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n</pre></td><td class=\"code\"><pre>result = list.forEach (element, index) -&gt; list[index] = element / <span class=\"number\">2</span>\n\n<span class=\"comment\"># или определяем константу по-дурацки</span>\n<span class=\"function\"><span class=\"title\">constant</span></span> = -&gt; <span class=\"number\">5</span>\n</pre></td></tr></table></figure>\n\n<p>Хотя такая запись и не приветствуется.</p>\n<h2>AngularJS</h2>\n<h3>Общие правила</h3>\n<p>Код следует разделять либо по назначению, либо по функции. В небольших проектах допускается следующая структура кода:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n</pre></td><td class=\"code\"><pre><span class=\"literal\">-</span><span class=\"comment\">application</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">controllers</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">directives</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">resources\n</pre></td></tr></table></figure>\n\n<p>Где <code>controllers</code> содержит все контроллеры, <code>directives</code> все директивы, а <code>resources</code> все сервисы. Однако для больших проектов такой способ малопригоден и выгоднее разделять модули по группе выполняемых функций.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre><span class=\"literal\">-</span><span class=\"comment\">application</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">authentication</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">controllers</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">directives</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">resources</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">news</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">controllers</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">directives</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">resources</span>\n<span class=\"string\">.</span><span class=\"string\">.</span><span class=\"string\">.</span>\n</pre></td></tr></table></figure>\n\n<p>При таком разделении очень легко найти нужные модули, а группы не мешают друг другу.</p>\n<h3>Dependency Injection</h3>\n<p>Следует использовать нотацию «массив». Запрещено указывать внедряемые модули только в качестве параметров функции.</p>\n<figure class=\"highlight lang-CoffeeScript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"code\"><pre>application.controller <span class=\"string\">\"authController\"</span>, [\n\n\t<span class=\"string\">\"$scope\"</span>\n\t<span class=\"string\">\"$http\"</span>\n\n\t($scope, $http) -&gt;\n\t\t...\n\n]\n</pre></td></tr></table></figure>\n\n<p>Также выше указана рекомендуемая форма записи во всех подобных ситуациях.</p>\n<h3>Использование манипуляций с DOM</h3>\n<p>Любые манипуляции с DOM за пределами директив строго запрещены. Забыть про jQuery и иже с ними.</p>\n<h3>Использование $scope</h3>\n<p>Не следует рассматривать $scope как модели. Это связка между настоящими моделями (Backbone.js, Restangular) и видом. Не больше, но и не меньше. Модели не обязательно выделять в отдельные сервисы, чаще всего достаточно просто использовать Restangular напрямую.</p>\n<h3>Рекомендуемые модули</h3>\n<p>Angular UI Router, Restangular.</p>\n<h2>HTML</h2>\n<h3>Общие правила</h3>\n<p>Всё, что заключается между угловыми скобками должно быть записано в одну строку. Без исключений.</p>\n<figure class=\"highlight lang-HTML\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre><span class=\"comment\">&lt;!-- Плохо --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"article\"</span>\n   <span class=\"attribute\">title</span>=<span class=\"value\">\"Some article\"</span>\n   <span class=\"attribute\">rel</span>=<span class=\"value\">\"Some relation\"</span>&gt;</span>\n\tArticle\n<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- Хорошо --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"article\"</span> <span class=\"attribute\">title</span>=<span class=\"value\">\"Some article\"</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"Some relation\"</span>&gt;</span>\n\tArticle\n<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n</pre></td></tr></table></figure>\n\n<h3>Отбивка</h3>\n<p>Как и во всех остальных случаях осуществляется <em>только</em> символами табуляции. Отбивка осуществляется всегда, когда возникает новая ступень иерархии DOM. Следует помнить, что текст внутри тега <em>создаёт новую ступень иерархии</em> (см. пример выше).</p>\n<h3>Перевод строк</h3>\n<p>Рекомендуется переводить строку перед переходом на новую ступень иерархии, однако в некоторых случаях это не обязательно. Обязательно переводить строку, если производится возврат на предыдущую ступень иерархии.</p>\n<figure class=\"highlight lang-HTML\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"title\">section</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>This is header<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"content\"</span>&gt;</span>\n\t\t... <span class=\"comment\">&lt;!-- a lot of html --&gt;</span>\n\t<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">section</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- Перевод строки перед &lt;/p&gt; не осуществляется --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"info\"</span>&gt;</span>This is some information<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n</pre></td></tr></table></figure>\n\n<p>Не рекомендуется записывать более двух ступеней иерархии в одну строку, даже если они невелики по объёму.</p>\n<figure class=\"highlight lang-HTML\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"comment\">&lt;!-- Не очень хорошо --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n\n<span class=\"comment\">&lt;!-- Лучше --&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span>\n</pre></td></tr></table></figure>\n\n<h2>CSS, LESS, SASS</h2>\n<p>В организации кода рекомендуется придерживаться методологии <a href=\"http://smacss.com/\">SMACSS</a> или по крайней мере разделять модули по принадлежности к группе элементов сайта. Например выделить в отдельный файл стили для заголовка страницы, стили для записи в блоге и т.д.</p>\n<p>При записи правил CSS/LESS/SASS следует придерживаться того же стиля записи фигурных скобок, что и в JavaScript:</p>\n<figure class=\"highlight lang-LESS\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre>p {\n\tfont-<span class=\"method\">family:</span> <span class=\"class\">Verdana</span>, sans-serif;\n\n\ta {\n\t\ttext-<span class=\"method\">decoration:</span> underlined;\n\t}\n}\n</pre></td></tr></table></figure>\n\n","excerpt":731,"source":"_posts/StyleGuide.md","slug":"StyleGuide","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"7":{"id":0,"title":"Введение в алгоритмы индексации поисковых машин","subtitle":"Нужно понимать и соблюдать","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-10-13T20:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[13],"comments":true,"layout":"post","content":"<h3>О чем подумать перед оптимизацией ресурса</h3>\n<p>Прежде чем начать оптимизацию сайта, т. е. поднять его на топовые позиции в поиске, следует понять что такое поисковые машины, что они содержат и как их готовить. </p>\n<p>Поисковые машины проходят огромнейший путь, чтобы найти информацию по нужному запросу. Они исследует не весь Интернет, а в пределах собственной базы данных, которая постоянно обновляет информацию. В Интернет сети находится несчитанное множество информации, где кол-во веб страниц превышает кол-во данных о них. \nПоисковые алгоритмы имеют индивидуальную структуру данных. К примеру: один и тот же запрос в Google и Яндекс выдаст абсолютно разные результаты. Стоит отметить,  что некоторые из поисковых машин используют алгоритмы успешных конкурентов. mail.ru тоже не исключение. Доволен базой данных от Google, добавляя свои изменения и корректировки.</p>\n<p>Таким образом, поисковые машины основываются на построение индивидуальной структуры базы, которая выдает результаты максимально соответствующие заданному запросу.\n<a id=\"more\"></a></p>\n<h3>Значимость Google как поискового движка</h3>\n<p>Теперь чуть подробнее о значимости Google. На сегодняшней день это самая успешная и популярная поисковая машина и по кол-ву пользователей и по собственной базе данных, хранящей нескольких миллиардов файлов. В 2000 году стало известно, что в день добавляется около 7,6 млн страниц. Задача поисковиков постоянно ползать по сети и индексировать страницы, содержащие огромное кол-во документов.  К тому же, базы данных поисковых машин постоянно меняются.</p>\n<h3>Процесс поиска</h3>\n<p>Процесс поиска происходит следующим образом: пользователь вбивает запрос в строку поиска, индекс дробит его по словам, далее их склеивает в соответствии с запросом и выдает результат, т.е релевантность, иными словами, соотвествие ключевому запросу.  Обнаружение релевантности страниц в сети для индексации- важнейшая часть работы поисковых машин. При низком качестве результатов поискового запроса Яндекс привлекает асессоры для выработки более совершенных алгоритмов оценки релевантности страниц. Асессоры- это люди, которые вручную оценивают соответствие выданных поисковой машиной страниц к запросу, введенному пользователем. Вначале они ищут эталонный сайт, который по их мнению должен соответствовать данному запросу. Субъективно выявляет характеристики, которые позволили стать ему актуальным и данные результаты передают инженерам для совершенствования алгоритмов. Такая проверка асессоров осуществляется регулярно для постоянного улучшения качества поиска. </p>\n<h3>Обновление базы данных</h3>\n<p>Для того, чтобы поисковик находил необходимые результаты, база данных должна постоянно обновлять как новые, так и старые страницы. Было выяснено, что из кол-ва в 500 страниц 23% всех веб- страниц обновляются ежедневно, половина же из них каждые 10 дней, а остальные перемещаются на новый доменный адрес.</p>\n<p>Спайдеры поисковиков ежедневно находят миллионы страниц, но частоту изменений определить крайне сложно, в связи с постоянными обновлениями. Существует бесконечное множество новостных сайтов, а так же интернет- магазинов, где информация обновляется постоянно и по несколько раз в день.</p>\n<h3>Важно знать</h3>\n<p>Сайт должен работать в момент его посещения поисковой машиной. В противном случае он может просто исчезнуть из индекса до следующего обновления. У поисковика появляются сомнения по поводу существования сайта и его благополучно удалят из списков. Вся информация, находящаяся на сайте, записывается в индексе поисковой машиной только в момент посещения сайта. Остальные изменения вносятся только после следующего посещения страницы. Для просмотра последней версии страницы в индексе поисковой системы, нужно открыть результаты поиска по ссылке “копия”. </p>\n<h3>Три класса поиска</h3>\n<p>Чтобы определить точность ответа на запрос следует различать 3 обобщенных класса поиска в сети:</p>\n<ol>\n<li>Информационный. Запрос от пользователей, которые ищут  необходимую информацию в сети: термины, определения, пояснения.</li>\n<li>Навигационный. Поиск определенного веб сайта, где необходимая информация должна находиться на сайте компании: новости, корпоративные сайты. Составляет 20% от всех запросов.</li>\n<li>Деловой. Означает осуществление действий пользователя через сеть: интернет- магазин, услуги.</li>\n</ol>\n<p>Итак, после введения 3-х классов следует понимать, что некоторые одинаковые деловые запросы для разных городов могут являться не актуальными. Контекст играет большую роль, в случае определения лучшего результата. Иногда более эффективные результаты получаем из других источников, которые сами не собираем.\nПоисковая машина с трудом может постичь природу запроса пользователя. Она может найти сайт на подходящую тему, ссылку или цитату, но не понять интуитивно цель запроса. </p>\n<h3>Поиск в сети и поиск по книжной библиотеке</h3>\n<p>Поисковые машины стараются найти результаты с помощью информационного поиска. Принцип их работы во многом подражает книжной библиотеке. Тут и название, имя автора, ключевые слова, порядковый номер идентификации, заголовок, номер индекса. Поиск в книжной библиотеке может осуществляться по автору и по категории. \nПоисковые машины не всегда могут точно определить сферу запроса, но стараются выдавать страницы, связанные с запросом благодаря «топологии сети». </p>\n<p>Поисковые машины выводят тысячи вариантов, некоторая часть которых может быть релевантной. Показатель релевантности снижается после двух первых страниц выведенных результатов. </p>\n<h3>Заключение. Соблюдение правил для топовых позиций в поиске</h3>\n<p>Итак, чтобы оставаться на лучших позициях в поиске, следует соблюдать ряд факторов, влияющих на индексацию сайта.\nИз этого следует, что для того, чтобы оставаться на лучших позициях в поиске:</p>\n<ul>\n<li>требуется постоянно следить за качеством своего ресурса и изменениями алгоритмов поисковой машины.</li>\n<li>Помимо этого необходимо, чтобы база данных постоянно обновляла новые и старые страницы. Сайт должен всегда находиться в рабочем состоянии в момент его посещения поисковой машиной, чтобы не исчезнуть в индексе.</li>\n<li>Для того, чтобы получить целевую аудиторию, необходимо верно составить  структуру сайта, опираясь на один из 3-х классов поиска, с соблюдением географического положения.</li>\n</ul>\n<p>По мотивам книги Яковлева &quot;Раскрутка сайтов: основы, секреты, трюки&quot; 4 издание.</p>\n","excerpt":1046,"source":"_posts/Seo_intro.md","slug":"Seo_intro","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"8":{"id":0,"title":"RabbitMQ: Простая и эффективная очередь сообщений.","subtitle":"что такое RabbitMQ и его применение","author":"Дмитрий Горбунов","gravatarMail":"atskiisotona@gmail.com","date":"2013-10-16T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[16,3],"comments":true,"layout":"post","content":"<p>В этой статье рассмотрим, как работает RabbitMQ, а также как и для чего её можно использовать в проектах на Node.js</p>\n<h2>Очереди сообщений</h2>\n<p>Что такое очередь сообщений (<code>message queue</code>)? Это некая структура данных, которая обеспечивает хранение и передачу двоичных данных (<code>blobs</code>) между различными участниками системы. Очереди сообщений практически всегда используются в крупных системах, благодаря важным преимуществам.</p>\n<ul>\n<li><strong><em>Независимость</em></strong> компонентов системы друг от друга. Благодаря использованию очереди, компоненты взаимодействуют через некий общий интерфейс, но ничего не знают о существовании друг друга.</li>\n<li><strong><em>Экономия ресурсов</em></strong> достигается вследствие возможности разумно распределять информацию, поступающую в очередь от одних процессов, между другими процессами, осуществляющими её обработку. Кроме того, благодаря тому, что нет необходимости промежуточного хранения необработанных данных, достигается дополнительная экономия ресурсов.</li>\n<li><strong><em>Надежность</em></strong> очередей достигается благодаря возможности накапливать сообщения, амортизируя недостаток вычислительных возможностей системы, а также благодаря независимости компонентов. Помимо этого очередь может аккомодировать сбои отдельных компонентов, осуществляя доставку «опоздавших» сообщений после восстановления.</li>\n<li>И, наконец, <strong><em>гарантия последовательной обработки</em></strong>, позволяющая точно контролировать потоки данных в системе и запускать асинхронную обработку там, где это необходимо, не беспокоясь, что одна операция выполнится раньше другой, от результата которой она зависит.</li>\n</ul>\n<p>Учитывая огромную важность очередей для надёжных и гибких систем обработки данных, была даже разработана спецификация протокола — AMQP, на основе которой разрабатывается несколько приложений, выполняющих функцию очереди — так называемых «<strong>брокеров</strong>». Аналогия с биржевыми процессами будет прослеживаться и в дальнейшем. Мы рассмотрим брокер RabbitMQ, авторами которого и создан протокол AMQP.\n<a id=\"more\"></a></p>\n<h2>Почему RabbitMQ?</h2>\n<p>Причин несколько, но одна из основных — реализация приложения на платформе Erlang/OTP, гарантирующая максимальную стабильность и масштабируемость очереди, как ключевого узла всей системы. Другая причина — полная открытость приложения, распространяющегося по лицензии Mozilla Public License и реализация открытого протокола AMQP, библиотеки для которого существуют во всех основных языках и платформах программирования. В том числе и для Node.js</p>\n<h2>Основные понятия</h2>\n<h3>Брокер</h3>\n<p>Под брокером мы будем понимать сам сервер RabbitMQ. Брокер может быть один, брокеров может быть несколько, объединённых в общий кластер. Брокер занимается непосредственно передачей сообщений. Однако на внутреннем уровне происходит намного больше процессов, нежели просто передача байтиков по сети.</p>\n<h3>Очередь</h3>\n<p>Очередь — основной логический компонент брокера. Именно из очереди клиент (<code>consumer</code>) забирает сообщения. Другое дело, что очередь не единственный участник обмена.</p>\n<h3>Биржа</h3>\n<p>Биржа (<strong>exchange</strong>, иногда переводится как «обмен») играет важнейшую роль в направлении сообщений от отправителя (<code>producer</code>) к клиенту (<em>consumer</em>, он же потребитель). Дело в том, что именно благодаря бирже, поступающее от отправителя сообщение направляется в нужную очередь. Кроме того, у сообщения может присутствовать метка (<code>routingKey</code>) (ключ м\nЭто наиболее важная строчка, в которой мы сообщаем брокеру, что сообщение было принято, полностью обработано и его можно безопасно удалить из очереди. Если такое подтверждение брокеру не отправить, то сообщение никогда не будет удалено из очереди и постепенно брокер заполнит всю оперативную память сервера. Будьте внимательны — это одна из самых частых ошибок при работе с очередью.</p>\n<p><strong>Важно</strong>: отправляйте <code>ack</code> только когда сообщение <em>действительно</em> полностью обработано и его можно удалить. Это будет гарантировать две вещи:</p>\n<ul>\n<li>Не будет потерянных сообщений</li>\n<li>Очередь сможет распределять нагрузку максимально честно, т.к. пока от клиента не придёт подтверждение, что обработка завершена, новое сообщение ему отправлено не будет</li>\n</ul>\n<p><strong>Важно</strong>: если сообщение обработать невозможно по техническим или каким-то другим причинам у вас есть два варианта.</p>\n<ul>\n<li>Всё равно отправить <code>ack</code> и навсегда потерять сообщение</li>\n<li>Вызывать <code>channel.nack</code>, отказавшись принимать и обрабатывать сообщение, тогда очередь добавит сообщение в конец и со временем оно снова будет отправлено на обработку (возможно другому клиенту)</li>\n</ul>\n<p><strong>Обратите внимание: брокер по-умолчанию сам распределяет нагрузку между клиентами, вам ничего не нужно для этого делать. Один у вас клиент, или пятьдесят — брокеру всё равно.</strong></p>\n<h3>Publish-Subscribe (он же Broadcast)</h3>\n<p>Никто не запрещает отправлять сообщения <em>сразу всем</em> клиентам, а не по алгоритму round-robin. Это позволяет использовать очередь в качестве сервера pubsub. Всё, что для этого нужно сделать — определить биржу типа <strong>fanout</strong>. Делается это в вызове <code>assertExchange</code>:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.assertExchange(<span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"fanout\"</span>)\n</pre></td></tr></table></figure>\n\n<p>Как видно, тип биржи передаётся вторым параметром. Поменяйте код отправителя и клиентов (помните, что определения бирж и очередей должны совпадать), как показано выше и попробуйте запустить несколько клиентов. Посмотрите, как будут распределяться сообщения теперь.</p>\n<p>Всего одно маленькое дополнение — и совершенно изменившийся алгоритм работы. Как видите, для того, чтобы менять поведение брокера, вовсе не нужно лезть в глубокие настройки сервера. Достаточно слегка поменять код.</p>\n<h3>Маршрутизация по шаблону</h3>\n<p>Как вы заметили, тип биржи определяет алгоритм работы брокера. Типом по-умолчанию является direct. Этот тип отправляет сообщения в чётком соответствии с <code>routingKey</code>, биржей и очередью. Тип <code>fanout</code> осуществляет доставку сообщений всем и сразу. А вот тип topic позволяет избирательно доставлять сообщения по шаблону, передаваемому всё в том же <code>routingKey</code>. Только формат этого параметра теперь становится особенным.</p>\n<p>Метка должна содержать несколько слов, разделённых точкой. Например: «a.b» или «animals.feline.tiger». Должна присутствовать по крайней мере одна точка. Максимальный размер метки — 255 байт. Обратите внимание: не символов, байт. Если вы используете символы Unicode, то имейте это ввиду.</p>\n<p>Существует два особых знака, которые используются в routingKey <em>при привязке очереди к бирже по метке</em> (и только тогда, но не при отправке!):</p>\n<ul>\n<li>«*», обозначающая <em>ровно одно слово</em> (например: «animals.feline.*» — подойдёт к «animals.feline.tiger», но не к «animals.feline.leopard.panther»)</li>\n<li>«#», обозначающий <em>ноль или более слов</em> (например: «animals.#» — подойдёт и к «animals.feline» и к «animals.canine.wolf»)</li>\n</ul>\n<p>Следующая привязка</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.bindQueue(<span class=\"string\">\"messages\"</span>, <span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"animals.feline.*\"</span>)\n</pre></td></tr></table></figure>\n\n<p>Позволит нам принимать все сообщения о животных из семейства кошачьих, не имеющих подвидов.</p>\n<p>Ну а следующее сообщение будет получено клиентом, который добавил вышестоящую привязку:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.publish(<span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"animals.feline.tiger\"</span>, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"Rroarrrr!\"</span>))\n</pre></td></tr></table></figure>\n\n<p>Зато такое сообщение им принято не будет:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.publish(<span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"animals.feline.cat.domestic\"</span>, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"Meow!\"</span>))\n</pre></td></tr></table></figure>\n\n<h3>Remote Procedure Call</h3>\n<p>Иногда возникает потребность передать сообщение обработчику <strong><em>И</em></strong> дождаться ответа. Этот сценарий описывает систему «удалённого вызова процедур». Такая система тоже вполне может быть построена с помощью RabbitMQ. Посмотрим, как это сделать.</p>\n<h4>Клиент</h4>\n<p>На клиенте всё очень просто: в вызов publish добавляется специальная опция replyTo, значением которой является имя очереди, в которой клиент будет ожидать ответ. Обратите внимание, что в данном случае клиент обращается к серверу именно через publish, поскольку он хочет вызвать удалённую процедуру, находящуюся на сервере. В данном сценарии отправителем будет являться клиент, а потребителем — сервер. Затем их роли поменяются местами, когда сервер отправит клиенту ответ.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.publish(<span class=\"string\">\"api\"</span>, <span class=\"string\">\"calculate\"</span>, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"2 + 3\"</span>), {replyTo: <span class=\"string\">\"api-reply\"</span>, correlationId: <span class=\"string\">\"calculate-1\"</span>})\n</pre></td></tr></table></figure>\n\n<p>Подразумевается, что очередь &quot;api-reply&quot; существует. Однако здесь следует заметить вот что: поскольку клиент ожидает ответ на конкретный вызов, то очередь, в которую придёт ответ должна быть уникальна. Для этой ситуации предусмотрена опция <code>exclusive: true</code> в вызове <code>assertQueue</code> — она гарантирует, что данная очередь будет доступна исключительно вызывавшему <code>assertQueue</code> клиенту и видна только в пределах канала связи. Мы могли бы создавать такую эксклюзивную очередь для <em>каждого</em> отдельного вызова RPC. Но это было бы крайне неэффективно (зато очень просто в реализации). Более выгодным вариантом является создание одной очереди на клиента\nмаршрутизации), которая дополнительно повлияет на решение брокера о том, в какую очередь сообщение будет отправлено.</p>\n<p>Обратите внимание: очередь вторична по отношению к бирже. Именно биржа определяет, куда пойдёт сообщение, в какую очередь. Клиенты же могут принимать сообщения только из очереди, поэтому если вы не хотите разбираться с кучей проблем и передать всю маршрутизацию сообщений брокеру — имейте следующее в виду: <em>если вы хотите отделить одни сообщения от других, их нужно разместить в разных очередях</em>.</p>\n<p>Другими словами, сообщения в одной очереди должны быть одинаковы по структуре, чтобы вы могли корректно и без усилий распределять их по системе. Рассматривайте очередь как набор элементов одинакового типа.</p>\n<h2>Варианты работы</h2>\n<h3>Прямая передача</h3>\n<p>В этом варианте в самом простом случае у нас один клиент и один отправитель. Отправитель шлёт сообщение в очередь, клиент слушает очередь, достаёт из неё сообщения и обрабатывает их. Рассмотрим как это работает на следующем примере.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> rabbit = require(<span class=\"string\">\"amqplib\"</span>).connect()\nrabbit.then(<span class=\"keyword\">function</span>(connection) {\n\t<span class=\"keyword\">var</span> ok = connection.createChannel()\n\n\tok.then(<span class=\"keyword\">function</span>(channel) {\n\t\t<span class=\"comment\">// durable: true is set by default</span>\n\t\tchannel.assertQueue(<span class=\"string\">\"messages\"</span>)\n\t\tchannel.assertExchange(<span class=\"string\">\"incoming\"</span>)\n\t\tchannel.bindQueue(<span class=\"string\">\"messages\"</span>, <span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"mda\"</span>)\n\n\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)\n\t\t\tchannel.publish(<span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"mda\"</span>, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"Hello \"</span> + i), {deliveryMode: <span class=\"literal\">true</span>})\n\t})\n\n\t<span class=\"keyword\">return</span> ok\n}).then(<span class=\"literal\">null</span>, console.log)\n</pre></td></tr></table></figure>\n\n<p>Для работы с RabbitMQ в Node.js лучше всего использовать библиотеку <code>amqplib</code>, реализующую соответствующий протокол. В этом случае вы можете использовать любой брокер, который соответствует этому протоколу.</p>\n<p>Библиотека вносит ещё один элемент в работу с очередью: канал. Однако это не более чем просто канал связи между брокером и общающимся с ним компонентом системы. Не следует рассматривать его как часть брокера или очереди сообщений.</p>\n<h3>Связь с брокером и создание канала</h3>\n<p>Рассмотрим по порядку, что происходит после установления связи с брокером и создания канала.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n</pre></td><td class=\"code\"><pre>channel.assertQueue(<span class=\"string\">\"messages\"</span>)\nchannel.assertExchange(<span class=\"string\">\"incoming\"</span>)\n</pre></td></tr></table></figure>\n\n<p>Два этих вызова обеспечивают существование очереди и биржи. Каждая очередь и биржа создаётся лишь один раз, а вызовы никак не влияют на уже существующие объекты. Очередь можно создать с дополнительными параметрами, важнейшим из которых является параметр <code>durable</code> — он влияет на то, будут ли сообщения в очереди сохранены в случае падения брокера. По-умолчанию в данной библиотеке этот параметр установлен в <code>true</code>. Подробнее обо всех параметрах создания очереди и биржи можно прочесть в документации к библиотеке. Отметим лишь, что в дальнейших примерах мы воспользуемся разными типами бирж.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.bindQueue(<span class=\"string\">\"messages\"</span>, <span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"mda\"</span>)\n</pre></td></tr></table></figure>\n\n<p>Этот вызов осуществляет привязку очереди к бирже и сообщению с конкретным <code>routingKey</code>: очередь messages привязывается к бирже <code>incoming</code>, которая должна передавать в эту очередь сообщения с меткой <code>mda</code>. Теперь мы можем либо принимать сообщения из этой очереди, будучи уверенными, что наш клиент через конкретный данный канал будет получать лишь сообщения с меткой <code>mda</code>, переданные через биржу <code>incoming</code>. Либо передавать сообщения в биржу incoming с меткой <code>mda</code>, зная, что они попадут в очередь <code>messages</code>. Если мы попытаемся передать сообщение с другой меткой, оно уйдёт в <code>/dev/null</code>, поскольку мы привязали лишь одну конкретную метку. Если мы попытаемся передать сообщение в несуществующую биржу, оно уйдёт в <code>/dev/null</code>, если привязать биржу к несуществующей очереди — тоже.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.publish(<span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"mda\"</span>, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"Hello \"</span> + i), {deliveryMode: <span class=\"literal\">true</span>})\n</pre></td></tr></table></figure>\n\n<p>Далее мы в цикле передаём сто сообщений бирже <code>incoming</code> с меткой <code>mda</code> (она же <code>routingKey</code>) и опцией <code>deliveryMode: true</code>, означающей что сообщение будет сохранено в очереди, если брокер выйдет из строя на время. Следует заметить, что сохранение сообщения на диск — операция медленная, и брокер может упасть в её процессе. Так что абсолютной надёжности эта опция не даёт.</p>\n<p>Сто сообщений мы передаём для демонстрации масштабирования системы исключительно средствами брокера, что очень просто и безболезненно.</p>\n<h3>Клиент для тестирования отправителя</h3>\n<p>Рассмотрим клиент, который нам нужен для тестирования отправителя. Запустим два или даже три таких клиента, после чего запустим отправителя, и убедимся, что все сообщения были распределены между клиентами максимально честно, по алгоритму round-robin.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> rabbit = require(<span class=\"string\">\"amqplib\"</span>).connect()\nrabbit.then(<span class=\"keyword\">function</span>(connection) {\n\t<span class=\"keyword\">var</span> ok = connection.createChannel()\n\n\tok.then(<span class=\"keyword\">function</span>(channel) {\n\t\t<span class=\"comment\">// durable: true is set by default</span>\n\t\tchannel.assertQueue(<span class=\"string\">\"messages\"</span>)\n\t\tchannel.assertExchange(<span class=\"string\">\"incoming\"</span>)\n\t\tchannel.bindQueue(<span class=\"string\">\"messages\"</span>, <span class=\"string\">\"incoming\"</span>, <span class=\"string\">\"mda\"</span>)\n\n\t\tchannel.consume(<span class=\"string\">\"messages\"</span>, <span class=\"keyword\">function</span>(message) {\n\t\t\tconsole.log(message.content.toString())\n\n\t\t\tchannel.ack(message)\n\t\t})\n\t})\n\n\t<span class=\"keyword\">return</span> ok\n}).then(<span class=\"literal\">null</span>, console.log)\n</pre></td></tr></table></figure>\n\n<p><strong>Обратите внимание</strong>: насколько код клиента похож на код отправителя. Отличается лишь то, что вместо отправки сообщений, мы принимаем их. Как было сказано выше, принимать сообщения можно лишь из очереди (так же как отправлять — только на биржу).</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.ack(message)\n</pre></td></tr></table></figure>\n\n<p><em>Однако в этом случае возникает вопрос</em>: как отделить ответ на один вызов от другого? Для этой ситуации предназначен ещё один параметр вызова <code>publish</code>: <code>correlationId</code>. Он принимает строковое значение и возвращается в ответе от сервера, чтобы клиент мог на его основе определить, результат какого вызова он получил только что. Его можно генерировать случайным образом. Если же клиенту приходит ответ с неизвестным <code>correlationId</code>, то его можно смело игнорировать. Такое может случиться из-за рассинхронизации сервера и брокера, например, в случае падения сервера.</p>\n<h3>Общий алгоритм работы</h3>\n<ol>\n<li>При запуске клиент создаёт эксклюзивную для себя очередь</li>\n<li>Для каждого вызова клиент отправляет дополнительные параметры: <code>replyTo</code> и <code>correlationId</code>. Последний должен быть уникален для вызова.</li>\n<li>Сервер слушает очередь, в которую отправляются вызовы от клиентов (обратите внимание, это <em>не</em> <code>replyTo</code>, а ещё одна отдельная очередь, общая для всех клиентов и сервера)</li>\n<li>При поступлении запроса, сервер обрабатывает его и отправляет ответ в очередь <code>replyTo</code> вместе с <code>correlationId</code>, полученными от клиента в запросе</li>\n<li>Клиент слушает очередь <code>replyTo</code>, при поступлении туда сообщения, он соотносит <code>correlationId</code> с имеющейся у него таблицей вызовов и обрабатывает результат</li>\n</ol>\n<p><strong>Замечание</strong>: если отправить сообщение через <code>publish</code> с пустым значением имени «биржи», а в качестве <code>routingKey</code> указать значение <code>replyTo</code>, то сообщение уйдёт по назначению:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.publish(<span class=\"string\">\"\"</span>, request.properties.replyTo, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"5\"</span>), {correlationId: request.properties.correlationId})\n</pre></td></tr></table></figure>\n\n<p>Аналогично можно отправлять сообщения и с клиента в очередь <code>rpc</code>:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre>channel.publish(<span class=\"string\">\"\"</span>, <span class=\"string\">\"rpc\"</span>, <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"2 + 3\"</span>), {replyTo: <span class=\"string\">\"rpc-reply-1\"</span>, correlationId: <span class=\"string\">\"calculate-1\"</span>})\n</pre></td></tr></table></figure>\n\n","excerpt":2112,"source":"_posts/RabbitMQ.md","slug":"RabbitMQ","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"9":{"id":0,"title":"Тренды поисковой оптимизации","subtitle":"в разрезе эволюции алгоритомов поисковых машин","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-10-25T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[13],"comments":true,"layout":"post","content":"<h2>Прошлое и настоящее Seo</h2>\n<p>1997-1999- зарождение поисковых машин. Период зомбированной работы seo- специалистов, занимающихся добавлением каждого сайта в поисковые машины. По сей день некоторые сео-компании предлагают своим клиентам самостоятельно регистрировать сайт во всевозможных поисковиках. Далеко не все знают о программах индексации, которые имеют алгоритмы Page Rank (алгоритм ссылочного ранжирования), Trust Rank (точные данные авторитетности сайта), которые, в свою очередь, хранятся в строжайшем секрете.</p>\n<h3>Расцвет спама</h3>\n<p>Тот период был переполнен <em>спамерами</em>, можно было использовать ключевые слова сколько угодно в комментариях, заголовках. Любой контент с легкостью прятался от посторонних глаз с помощью специальных <em>HTML</em> уловок. </p>\n<p>Поисковые машины были слабы в технологиях распознавания подобных уловок, поэтому такие сайты занимали лидирующие позиции. Несмотря на то, что такой подход, не иначе как прошлый век, оптимизаторы продолжают вести модель примитивной оптимизации, за счет чего спам-сайты «банят» (другими словами, удаляют из индекса).</p>\n<p><strong><em>Что за правило, не имеющее исключений?</em></strong></p>\n<p>Yahoo использовал алгоритмы, исключающие страницы, использующие черные способы оптимизации</p>\n<h2>Внешние факторы: хорошо для прошлого, бесполезно для будущего?</h2>\n<a id=\"more\"></a>\n\n<h3>Щелчки пользователей</h3>\n<p>В 1999-х поисковые системы для поднятия позиций пытались использовать логику обычного интернет искателя. В том случае контент не играл роли, а вот количество кликов, напротив. Работа системы <em>DirectHit</em> заключалась в отслеживании сайтов, которые выбирают пользователи по ключевому слову, тем самым поднимая рейтинг сайтов. Так Рамблер демонстрировал работу этой схемы рейтингом ТОП 100.</p>\n<h3>Ссылки с других сайтов</h3>\n<p>Итак, появляется еще один метод, способный поднять индексацию сайта- это привлечение сторонних источников, ссылающихся на исходный сайт. До сих пор этот метод работает и приносит основной доход компаниям, занимающимися seo- оптимизацией, а так же является одним из основных факторов ранжирования.</p>\n<p>Популярной технологией поднятия сайта стали <em>ссылочные фермы</em>. Поисковая машина учитывает и поощряет количество входящих ссылок, поэтому внешняя ссылочная страница- это прекрасный выход, полезный спайдерам поисковиков. </p>\n<p>Итак, ссылочная страница принимает много ссылок на вашу страницу. Ссылки учитываются роботом при индексации.\nТаким образом, создалась целая ферма ссылочных страниц, ссылающихся друг на друга.</p>\n<p>Пока подобные фермы разрастались, спайдеры уже знали о них. \nСегодня поисковики снижают преимущества от использования подобных методов.</p>\n<h2>SEO и SEM</h2>\n<p><em>SEM</em> - современный метод, повышающий качество и популярность сайта.</p>\n<p>Чтобы достичь вершин, другими словами топовых позиций, следует придерживаться простых правил: анализ целевой аудитории, анализ работы конкурентов и уникальный копирайтинг. </p>\n<p>Сегодня раскрутка сайта с помощью спама или, так называемого, <em>черного метода</em> абсолютна неэффективна и более того, вредит вашему сайту, поскольку распознаются автоматически роботами и понижают репутацию ресурса и даже «банятся».</p>\n<p>Существует бесконечное количество способов повышений позиций, вопрос в финансах. НО топовые позиции сайта гораздо сложнее сохранить, поэтому важно продумать продвижение ресурса на будущее.</p>\n<h2>Стабильные и нестабильные инструменты SEO</h2>\n<h3>Покупка ссылок</h3>\n<p>Действительно, покупка ссылок ведет к быстрым результатам.\nНеобходимо заботиться о стабильных результатах, если стабильность отсутствует, то поисковики вскоре уничтожат сайт,  который ее использует. Восстановить сайты с плохой репутаций в прошлом было достаточно просто, сегодня поисковики не дают сайтам с «клеймом» никаких поблажек. Пройдет не мало времени для реабилитации. В таких случаях может следует продумать о создании сайта с нуля?</p>\n<p>Поисковая система <em>Google</em> владеет историей сайта полностью, включая информацию о любой, проиндексированной страницей вашего сайта,  контент,  любую страницу, на которую вы ссылались и которая ссылалась на ваш сайт.</p>\n<h3>Популярные ресурсы</h3>\n<p>В последнее время наиболее популярными стратегиями стали линкбэйтинг и социальные сети. Они используют кучу возможностей обмена ссылками, перекрестные связи, а самое главное- построение ссылок, одобренного поисковыми системами. </p>\n<p><strong><em>Линкбэйтинг</em></strong>- создание контента для сайта, который будет заставлять людей ссылаться на него. Другими словами- вирусный маркетинг в сети. Основная задача- составить правильный и привлекательный контент. Новый контент может принести более 1000 ссылок за день, помимо этого ссылки, принесенные линкбэйтингом, как правило, являются естественными, т.e. принесенными от реальных людей.\nРазмещение контента в социальных сетях могут привести от 5-10 000 посетителей (в зависимости от популярности сайта), но, к сожалению, они временные. Поэтому, в лучшем случае, процентов 10 из них- это заинтересованная и целевая аудитория. </p>\n<h2>Будущее поискового маркетинга</h2>\n<p>Следует не забывать о том, что развитие поисковых машин происходит с невероятной скоростью, а это значит, что сео- оптимизаторы всегда должны быть в курсе всех нововведений.</p>\n<p><strong><em>В будущем</em></strong>: распознавание аудио контента, графики и пр. \nПоисковый маркетинг все больше соответствует традиционному.</p>\n<p>В перспективе поисковый маркетинг будет зависеть от рекламы и аналитики, оптимизации сайта и контента и внестраничных факторов продвижения. Если следовать теории правильной оптимизации сайта, то вскоре вы получите приток посетителей, даже если ваши позиции низкие. \nРейтинг конкурентов может занимать лидирующие позиции, зато целевая аудитория вашего сайта может быть несравнимо выше и приносить больше заказов.</p>\n","excerpt":1352,"source":"_posts/Seo_intro2.md","slug":"Seo_intro2","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"10":{"id":0,"title":"Ежедневные открытия","subtitle":"часто задаваемые вопросы, приводящие к провалам","author":"Виталий Аминев","gravatarMail":"v@aminev.me","date":"2013-11-03T00:00:00.000Z","updated":"2013-11-12T14:30:22.000Z","categories":[],"tags":[5],"comments":true,"layout":"post","content":"<h2>Что такое области видимости в Angular.js?</h2>\n<p><code>Scope</code>, оно же <code>область видимости</code> - это объект, ссылающийся на своеобразную модель приложения. Это контекст, в котором\nисполняются и обрабатываются выражения. </p>\n<p>Области видимости представляют из себя иерархическую структуру, которая копирует DOM вашего приложения. Области видимости могут наблюдать за изменениями значений выражений, исполняющихся в их контексте и\nспособны распространять события.</p>\n<p>По сути <code>scope</code> - это сердце вашего приложения, в котором и происходит вся &quot;магия&quot;.</p>\n<h2>Как писать интеграционные тесты с использованием <code>$httpBackend</code> из набора <code>Angular-mocks</code></h2>\n<p>Как обычно достаточно пространное описание в документации не дает четкого представления о том, как же все-таки делать\nадекватные заглушки для ответа. </p>\n<p>Приводим ответ в виде примера:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> backendService = angular.module(<span class=\"string\">\"backendService\"</span>, [<span class=\"string\">\"nameOfYourApp\"</span>, <span class=\"string\">\"ngMockE2E\"</span>]);\n\nbackendService.run([\n  <span class=\"string\">\"$httpBackend\"</span>,\n  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($httpBackend)</span> {</span>\n    \n    $httpBackend.when(<span class=\"string\">\"GET\"</span>, <span class=\"regexp\">/^\\/uri\\/to\\/match$/</span>).respond(<span class=\"keyword\">function</span>(method, url, params){\n      <span class=\"comment\">// здесь самое интересное - формат ответа. Он обязательно должен быть в виде массива</span>\n      <span class=\"comment\">// 1 элемент - код ответа, Number</span>\n      <span class=\"comment\">// 2 элемент - строка с ответом, String</span>\n      <span class=\"comment\">// 3 элемент - дополнительные Headers, Object</span>\n      <span class=\"keyword\">return</span> [ <span class=\"number\">200</span>, JSON.stringify({success:<span class=\"literal\">true</span>, hello: <span class=\"string\">\"World!\"</span>}), {} ];\n    });\n  }\n]);\n</pre></td></tr></table></figure>\n\n","excerpt":0,"source":"_posts/faq_1.md","slug":"faq_1","ctime":"2013-11-12T14:30:22.000Z","mtime":"2013-11-12T14:30:22.000Z"},"11":{"id":0,"title":"Быстрое тестирование приложений на Cordova/PhoneGap","subtitle":"","author":"Vladimir Kratyk","gravatarMail":"kvofreelance@gmail.com","date":"2013-11-07T00:00:00.000Z","updated":"2013-11-12T14:30:22.000Z","categories":[],"tags":[20,21],"comments":true,"layout":"post","content":"<p>Я думаю, что у многих в процессе написания приложения с использованием фреймворка Cordova/Phonegap возникала проблема тестирования приложений на девайсе. После каждого изменения нужно постоянно исполнять команды build и run. Этот процесс занимает много времени. А время для разработчиков очень важно ;). </p>\n<p>Вы можете сказать, что через браузер на локальном хосте очень даже удобно все проверять. Я согласен, но нет гарантии, что на мобильном устройстве все элементы приложения будут отображаться также, как и на обычном браузере. </p>\n<h3>Приступим:</h3>\n<p>Нам потребуется ПК, телефон и WiFi роутер.\nЕсли у вас установлен локальный web-сервер на ПК- это хорошо, если нет, то нужно установить. Я отдаю предпочтение сборкам WAMP для Windows, LAMP для Linux, MAMP для MacOS. После этого копируйте весь свой проект в папку <Document Root>, в которой сервер хранит все файлы, который он предоставляет “наружу”. Для проверки успешности установки набираем в строке браузера <code>http://localhost/</code>\nВ настройках Apache сервера (файл <code>httpd.conf</code>) открываем доступ к корневой папке:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre><span class=\"tag\">&lt;Directory /&gt;</span>\n  <span class=\"keyword\">Options</span> Includes Indexes FollowSymLinks\n  <span class=\"keyword\">AllowOverride</span> All\n  <span class=\"keyword\">Allow</span> from all <span class=\"comment\">#для Всех</span>\n  <span class=\"comment\">#Allow from 192.168.0.2 для определенного IP-адресса</span>\n<span class=\"tag\">&lt;/Directory&gt;</span>\n</pre></td></tr></table></figure>\n\n<p>Сохраняем и перезапускаем сервер. Для проверки в строку браузера вводим IP адрес, который роутер выдал вашему ПК (команда ipconfig для Windows и ifconfig для Linux/MacOS). \nК примеру: <code>http://192.168.0.3</code>\nПодключаемся к WiFi сети с помощью телефона. </p>\n<p><strong>Очень важно</strong>, чтобы телефон и ПК, на котором установлен web-сервер, находились в  одной подсети. На телефоне открываем <strong><em>стандартный</em></strong> браузер и вводим <code>http://192.168.0.3/AppName/www</code>, где <code>192.168.0.3</code>- это IP адрес вашего ПК, на котором установлен web-сервер, AppName/www - это путь к паке, где расположена веб-часть вашего приложения. \nВыбор стандартного браузера обусловливается тем, что фреймворк Cordova/PhoneGap запускает ваше приложение на том самом движке, на котором работает стандартный браузер.</p>\n<p><em>Спасибо за внимание и удачи в НАШЕМ УВЛЕКАТЕЛЬНОМ ДЕЛЕ!</em></p>\n<p><strong>P.S.</strong>: если же у вас нет роутера, но ПК имеет публичный IP-адрес, то вместо <code>192.168.0.3</code> вы должны ввести публичный IP-адрес и тогда можете заходить откуда угодно. Главное иметь подключение к Интернету.</p>\n","excerpt":0,"source":"_posts/Cordova.md","slug":"Cordova","ctime":"2013-11-12T14:30:22.000Z","mtime":"2013-11-12T14:30:22.000Z"},"12":{"id":0,"title":"Javascript, работа с переменными и их типы","subtitle":"скалярные и составные данные, указатели на объекты и массивы","author":"Виталий Аминев","gravatarMail":"v@aminev.me","date":"2013-11-09T00:00:00.000Z","updated":"2013-11-13T20:08:28.000Z","categories":[],"tags":[10],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/riot.jpg\" alt=\"Фанатизм\"></p>\n<h2>Типы переменных в Javascript</h2>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"code\"><pre><span class=\"number\">1.</span> String <span class=\"comment\">// строка</span>\n<span class=\"number\">2.</span> Boolean <span class=\"comment\">// булин: true/false</span>\n<span class=\"number\">3.</span> Number <span class=\"comment\">// число </span>\n<span class=\"number\">4.</span> Object <span class=\"comment\">// Объект</span>\n<span class=\"number\">5.</span> Array <span class=\"comment\">// Массив</span>\n<span class=\"number\">6.</span> Function <span class=\"comment\">// Функция</span>\n<span class=\"number\">7.</span> <span class=\"literal\">null</span> <span class=\"comment\">// тип - объект, на самом деле ссылка на объект null</span>\n<span class=\"number\">8.</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// не существующая переменная</span>\n</pre></td></tr></table></figure>\n\n<h3>Скалярные типы переменных</h3>\n<p>Они же простые типы данных. Их ключевой особенностью является то, что при присвоении другим переменным, \nзначение <strong><em>копируется</em></strong></p>\n<p>К скалярным типам данных относятся:</p>\n<ol>\n<li>String<a id=\"more\"></a></li>\n<li>Boolean</li>\n<li>Number</li>\n</ol>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// данный сниппет показывает как работают скалярные переменные</span>\n\n<span class=\"keyword\">var</span> x = <span class=\"number\">10</span>,\n    y = <span class=\"number\">12</span>,\n    z = <span class=\"string\">\"f\"</span>\n    \nconsole.log(x+y) <span class=\"comment\">// 22</span>\nconsole.log(x+z) <span class=\"comment\">// \"10f\"</span>\n<span class=\"keyword\">var</span> m = x\nx = <span class=\"number\">1250</span>\nconsole.log(<span class=\"string\">\"m is \"</span>, m, <span class=\"string\">\", x is \"</span>, x) <span class=\"comment\">// m is 10, x is 1250</span>\n</pre></td></tr></table></figure>\n\n<h3>Составные или комплексные типы переменных</h3>\n<p>Здесь все намного интереснее - присвоение переменной всего лишь отдает <strong><em>ссылку</em></strong>\nПроще всего понять на примере</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> x = {a: <span class=\"number\">10</span>, b: <span class=\"number\">25</span>, c: [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>], m: {} }, <span class=\"comment\">// объект x</span>\n    copyOfX = x,\n    arr = x.c,\n    obj = x.m\n\narr.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>) <span class=\"comment\">// удаляем первый элемент массива</span>\nobj.hello = <span class=\"string\">\"world\"</span> <span class=\"comment\">// добавляем свойство объекта</span>\n\nconsole.log( copyOfX === x ) <span class=\"comment\">// true</span>\n\nconsole.log( arr === x.c )) <span class=\"comment\">// true</span>\nconsole.log( arr ) <span class=\"comment\">// [20, 30]</span>\nconsole.log( x.c ) <span class=\"comment\">// [20, 30]</span>\n\nconsole.log( obj ) <span class=\"comment\">// { hello: \"world\" }</span>\n</pre></td></tr></table></figure>\n\n<p>К составным переменным относятся:</p>\n<ol>\n<li>Object</li>\n<li>Array</li>\n<li>Function</li>\n</ol>\n<p>В следующей заметке читайте об отношении функций, контекстов и this</p>\n","excerpt":1258,"source":"_posts/variables.md","slug":"variables","ctime":"2013-11-13T20:08:28.000Z","mtime":"2013-11-13T20:08:28.000Z"},"13":{"id":0,"title":"Простой способ оптимизировать сайт для работы с Retina изображениями","subtitle":"особенности компоновки спрайтов (sprites)","author":"Виталий Аминев","gravatarMail":"v@aminev.me","date":"2013-11-10T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[31],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/serf.jpg\" alt=\"Макбук про с дисплеем ретина\"></p>\n<p>Ни для кого не секрет, что количество устройств, поддерживающих высокое разрешение, aka <code>retina</code> постоянно растет. \nПланшеты, макбуки с ретиной, телефоны - у всех сверхчеткое разрешение, а ваш сайт все еще покрыт огромным количеством\nпикселей. Не грустим, все что нам нужно сделать - создать новые картинки. И их размер должен быть ровно в <strong><em>2</em></strong> раза больше.</p>\n<p>Простого способа переделать все графические элементы не существует. Я, конечно, надеюсь что для начала у вас все\nеще есть оригинальные векторные изображения. Тем не менее, проблема кроется не в том, что вам придется создавать все \nграфические элементы заново. Проблема заключается в том, что вам потребуется поддерживать и старые устройства, для которых\nне требуются детальные изображения. Более того, вы не можете изменять ширину или высоту <code>div контейнеров</code>, содержащих \nфоновые графические элементы, так как вы всего лишь получите большое изображение, пестрящее &quot;огромными&quot; пикселями.</p>\n<h3>Преобразуем ваши спрайты для работы с ретиной</h3>\n<p>Первая и самая <strong><em>важная</em></strong> вещь - графические элементы должны быть ровно в 2 раза больше в размере, для того, чтобы данный\nспособ сработал.</p>\n<a id=\"more\"></a>\n\n<p>Пример верстки иконок.</p>\n<figure class=\"highlight lang-html\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre><span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"#\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"icon icon-youtube\"</span>&gt;</span>youtube<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"#\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"icon icon-facebook\"</span>&gt;</span>facebook<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"title\">a</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"#\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"icon icon-googleplus\"</span>&gt;</span>google plus<span class=\"tag\">&lt;/<span class=\"title\">a</span>&gt;</span>\n</pre></td></tr></table></figure>\n\n<p>Сопутствующие стили, которые потребуется добавить. Мы используем <code>less</code>, о нем много информации в гугле ;)</p>\n<figure class=\"highlight lang-css\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n</pre></td><td class=\"code\"><pre>.icon {\n\t\tbackground-image: url(icons.png); // спрайт с картинками\n\t\twidth: 28px; // ширина блока\n\t\theight: 29px; // высота блока\n\t\tline-height: 29px;\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-position: top left;\n\t\tpadding: 0;\n\t\tmargin-right: 2px;\n\t\tdisplay: inline-block;\n\t\ttext-indent: -9999px; // прячем текст\n}\n.icon:hover {\n\t\tbackground-image: url(hover.png); // спрайт с теми же картинками, но при наведении. \n\t\t// можно оптимизировать и склеить два спрайта, плюс добавить отступ по вертикали\n}\n</pre></td></tr></table></figure>\n\n<p>Позиционируем иконки</p>\n<figure class=\"highlight lang-css\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"code\"><pre><span class=\"class\">.icon-youtube</span> <span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">background-position</span>:<span class=\"value\"> <span class=\"number\">0</span> <span class=\"number\">0</span>;</span></span>\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.icon-facebook</span> <span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">background-position</span>:<span class=\"value\"> -<span class=\"number\">28</span>px <span class=\"number\">0</span>px;</span></span>\n<span class=\"rule\">}</span></span>\n<span class=\"class\">.icon-googleplus</span> <span class=\"rules\">{\n    <span class=\"rule\"><span class=\"attribute\">background-position</span>:<span class=\"value\"> -<span class=\"number\">56</span>px <span class=\"number\">0</span>px;</span></span>\n<span class=\"rule\">}</span></span>\n</pre></td></tr></table></figure>\n\n<h3>Но все это базовые вещи. Теперь перейдем к интересному</h3>\n<p>Мы добавим <code>@media</code> запрос, который будет ориентироваться <strong><em>только</em></strong> на экраны с retina дисплеем. Для них мы изменим\n<code>background-image</code> для другого, который будет в 2 раза больше. Мы добавим суффикс @2x, чтобы организовать наши изображения.\nПосле этого мы установим параметр <code>background-size</code>, чтобы размер картинки совпал с размером спрайта для обычных машин или\nполовина ширины спрайта для ретины. Именно на этом этапе очень важно, что спрайт с ретиной ровно в 2 раза больше, чем\nобычный спрайт. Иначе, картинки не будут отображаться правильно.</p>\n<figure class=\"highlight lang-css\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre><span class=\"at_rule\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">1.5</span>), only screen and (min--moz-device-pixel-ratio: <span class=\"number\">1.5</span>), only screen and (min-resolution: <span class=\"number\">240</span>dpi) </span>{\n\t\t<span class=\"class\">.icon</span> <span class=\"rules\">{\n\t\t\t\t<span class=\"rule\"><span class=\"attribute\">background-image</span>:<span class=\"value\"> <span class=\"function\">url(<span class=\"string\">'icons@2x.png'</span>)</span>;</span></span>\n\t\t\t\t<span class=\"rule\"><span class=\"attribute\">background-size</span>:<span class=\"value\"> <span class=\"number\">84</span>px;</span></span>\n\t\t<span class=\"rule\">}</span></span>\n\t\t<span class=\"class\">.icon</span><span class=\"pseudo\">:hover</span> <span class=\"rules\">{\n\t\t    <span class=\"rule\">// не оптимальное решение, лучше склеить спрайты\n\t\t\t\t<span class=\"attribute\">background-image</span>:<span class=\"value\"> <span class=\"function\">url(<span class=\"string\">'hover@2x.png'</span>)</span>;</span></span>\n\t\t<span class=\"rule\">}</span></span>\n}\n</pre></td></tr></table></figure>\n\n<h3>Вуаля, все готово</h3>\n<p>Теперь ваш сайт готов обслуживать девайсы с ретиной. Заметьте, что вы совершенно не использовали <code>Javascript</code>, да и \nвообще никакой магии.</p>\n","excerpt":1314,"source":"_posts/retina.md","slug":"retina","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"14":{"id":0,"title":"Блокнот с помощью браузера с одной строчкой кода.","subtitle":"концепции и практическое применение","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-17T00:00:00.000Z","updated":"2013-11-18T11:29:38.000Z","categories":[],"tags":[10,25],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/notepad.jpg\" alt=\"Иллюстрация блокнота\"></p>\n<p>Иногда я только и делаю, что пишу всякую ерунду. Только чтобы отчистить свой разум и переключиться с одного дела на другое. Во время выполнения работы в голову то и дело приходят разные мысли, возможно связанные с делом, а возможно и нет. Нужно куда- то записать наработанное, не захламляя рабочее пространство. </p>\n<h3>Текстовый редактор</h3>\n<p>Существует очень простой способ использования браузера в качестве текстового редактора. Я просто открываю новую закладку и набираю в url закладке:</p>\n<p><code>data:text/html, &lt;html contenteditable&gt;</code></p>\n<p>Вот и браузерный блокнот.</p>\n<h3>Почему это работает?</h3>\n<p>Не надо это запоминать. Это вам не ракеты в космос запускать. Используем формат <a href=\"http://www.nczonline.net/blog/2009/10/27/data-uris-explained/\">Data URl</a> и говорим браузеру отрисовать html тег (можете попробовать <code>javascript:alert(&#39;Bazinga&#39;);</code>) </p>\n<p>Содержимое вышеописанного html файла- это простая строка с <code>html5</code> атрибутом <code>contenteditable</code>. </p>\n<p><strong>Важно знать</strong>: строка будет работать на современных браузерах, которые распознают данный атрибут. \nВсе готово. Удачи.</p>\n","excerpt":0,"source":"_posts/Browser_notepad.md","slug":"Browser_notepad","ctime":"2013-11-18T11:29:38.000Z","mtime":"2013-11-18T11:29:38.000Z"},"15":{"id":0,"title":"Фотографируй себя когда создаешь коммит","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-18T00:00:00.000Z","updated":"2013-11-18T11:29:38.000Z","categories":[],"tags":[26],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/selfie.jpg\" alt=\"Самофото\"></p>\n<p>Начнем со скачивания <code>imagesnap</code> из <a href=\"https://github.com/rharder/imagesnap\">https://github.com/rharder/imagesnap</a> или установим его с помощью <code>homebrew</code> \n<code>brew install imagesnap</code></p>\n<p>Создадим  <code>~/.gitshots</code> содержащий:\n<code>mkdir ~/.gitshots</code></p>\n<p>Добавим <code>post-commit hook</code>, чтобы привязать ваше <em>github</em> хранилище:</p>\n<figure class=\"highlight lang-ruby\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"comment\">#!/usr/bin/env ruby</span>\nfile=<span class=\"string\">\"~/.gitshots/<span class=\"subst\">#{<span class=\"constant\">Time</span>.now.to_i}</span>.jpg\"</span>\n<span class=\"keyword\">unless</span> <span class=\"constant\">File</span>.directory?(<span class=\"constant\">File</span>.expand_path(<span class=\"string\">\"../../rebase-merge\"</span>, __FILE_<span class=\"number\">_</span>))\n  puts <span class=\"string\">\"Taking capture into <span class=\"subst\">#{file}</span>!\"</span>\n  system <span class=\"string\">\"imagesnap -q -w 3 <span class=\"subst\">#{file}</span> &\"</span>\n<span class=\"keyword\">end</span>\nexit <span class=\"number\">0</span>\n</pre></td></tr></table></figure>\n\n<p>Наслаждайтесь!</p>\n","excerpt":0,"source":"_posts/take_your_photo.md","slug":"take_your_photo","ctime":"2013-11-18T11:29:38.000Z","mtime":"2013-11-18T11:29:38.000Z"},"16":{"id":0,"title":"Создавайте отчет о выполненной работе, используя Git Log","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-19T00:00:00.000Z","updated":"2013-11-18T22:16:03.000Z","categories":[],"tags":[26],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/paper.jpg\" alt=\"Зарылся\"></p>\n<p>Иногда наши клиенты просят отправить недельный отчет по проделанной работе. Несомненно, это занятие не доставляет удовольствия ни одному разработчику. Я предпочитаю предоставлять данную информацию с помощью <em>git log</em>.</p>\n<h2>Способ создания git log</h2>\n<p>Результат можно достичь, в случае использования индивидуальных настроек:\n<code>git log --author=Vitaly # Поставьте свое имя</code></p>\n<p>Генерируем следующий вывод данных:</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight lang-ruby\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n</pre></td><td class=\"code\"><pre>commit ad5140bca518c676cd4a6e9b268f66d3ff89f992\n<span class=\"constant\">Author</span><span class=\"symbol\">:</span> <span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span> &lt;v<span class=\"variable\">@aminev</span>.me&gt;\n<span class=\"constant\">Date</span><span class=\"symbol\">:</span>   <span class=\"constant\">Tue</span> <span class=\"constant\">Nov</span> <span class=\"number\">19</span> <span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">01</span><span class=\"symbol\">:</span><span class=\"number\">41</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>\n\n    refs <span class=\"comment\">#101: Lorem Ipsum commit message</span>\n\ncommit <span class=\"number\">5</span>d3d687cbdea09e334267312451065a4416ea5b1\n<span class=\"constant\">Merge</span><span class=\"symbol\">:</span> <span class=\"number\">76</span>c97d3 b7850f9\n<span class=\"constant\">Author</span><span class=\"symbol\">:</span> <span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span> &lt;v<span class=\"variable\">@aminev</span>.me&gt;\n<span class=\"constant\">Date</span><span class=\"symbol\">:</span>   <span class=\"constant\">Tue</span> <span class=\"constant\">Nov</span> <span class=\"number\">19</span> <span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">01</span><span class=\"symbol\">:</span><span class=\"number\">41</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>\n\n    <span class=\"constant\">Merge</span> branch <span class=\"string\">'master'</span> of git.example.<span class=\"symbol\">com:</span>your-project/your-branch\n\ncommit <span class=\"number\">7</span>e6e36eb78f3b07bcb12c0fa3c1e240e6634ellr\n<span class=\"constant\">Author</span><span class=\"symbol\">:</span> <span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span> &lt;v<span class=\"variable\">@aminev</span>.me&gt;\n<span class=\"constant\">Date</span><span class=\"symbol\">:</span>   <span class=\"constant\">Tue</span> <span class=\"constant\">Nov</span> <span class=\"number\">11</span> <span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">01</span><span class=\"symbol\">:</span><span class=\"number\">21</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>\n\n    <span class=\"constant\">Lorem</span> <span class=\"constant\">Ipsum</span> commit message\n\ncommit f86221395bee652e08ab8d25c18445c27yy5b723\n<span class=\"constant\">Author</span><span class=\"symbol\">:</span> <span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span> &lt;v<span class=\"variable\">@aminev</span>.me&gt;\n<span class=\"constant\">Date</span><span class=\"symbol\">:</span>   <span class=\"constant\">Tue</span> <span class=\"constant\">Nov</span> <span class=\"number\">12</span> <span class=\"number\">12</span><span class=\"symbol\">:</span><span class=\"number\">47</span><span class=\"symbol\">:</span><span class=\"number\">11</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>\n\n    refs <span class=\"comment\">#101: Lorem Ipsum commit message</span>\n\ncommit <span class=\"number\">31</span>dc49c6a8da7bou699aff7814baa0af555618d8\n<span class=\"constant\">Author</span><span class=\"symbol\">:</span> <span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span> &lt;v<span class=\"variable\">@aminev</span>.me&gt;\n<span class=\"constant\">Date</span><span class=\"symbol\">:</span>   <span class=\"constant\">Tue</span> <span class=\"constant\">Nov</span> <span class=\"number\">13</span> <span class=\"number\">15</span><span class=\"symbol\">:</span><span class=\"number\">23</span><span class=\"symbol\">:</span><span class=\"number\">41</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>\n\n    refs <span class=\"comment\">#100: Lorem Ipsum commit message</span>\n</pre></td></tr></table></figure>\n\n<h2>Следующий шаг:</h2>\n<p>Ограничиваем лог последней неделей (или месяцем или…). Можем использовать его начиная и заканчивая следующими опциями:\n<code>git log --author=Vitaly --since=&#39;1 sunday ago&#39; --until=&#39;now&#39;</code></p>\n<p>В системе автоматически введены настройки, которые выводят результаты о проделанной работе, начиная с воскресения.\nМожно так же поменять настройки временных рамок:\n<code>git log --author=Vitaly --since=&#39;2 sunday ago&#39; --until=&#39;1 sunday ago&#39;</code></p>\n<p>На самом деле это не особо читаемый формат, но я предпочитаю создавать компактный отчет, используя  <code>formatoption</code>. Помимо этого используется строгая последовательность для установки формата и показа информации в журнале событий. Предпочтительный формат:\n<code>%Cred%h%Creset %s %Cgreen(%ci) %Cblue&lt;%an&gt;%Creset</code></p>\n<p>демонстрируя commit hash <code>%h</code>, красный цвет <code>%Cred</code>, сообщение в коммите <code>%s</code> в стандартном цвете <code>%Creset</code>, \nвремя в коммите <code>%ci</code>, в зеленом цвете <code>%Cgreen</code> и имя автора <code>%an</code>, в голубом <code>%Cblue</code> и переключение цвета. \nБольшее кол-во вариантов форматирования вы можете посмотреть на <a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_format\">официальном сайте</a></p>\n<p><strong>Итак создаем:</strong></p>\n<figure class=\"highlight lang-ruby\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre>ad5140b refs <span class=\"comment\">#101: Lorem Ipsum commit message (2013-08-23 12:50:41 2013 +0400) &lt;Vitaly Aminev&gt;</span>\n<span class=\"number\">5</span>d3d687 <span class=\"constant\">Merge</span> branch <span class=\"string\">'master'</span> of git.example.<span class=\"symbol\">com:</span>your-project/your-branch (<span class=\"number\">2013</span>-08-<span class=\"number\">23</span> <span class=\"number\">12</span><span class=\"symbol\">:</span><span class=\"number\">39</span><span class=\"symbol\">:</span><span class=\"number\">35</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>) &lt;<span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span>&gt;\n<span class=\"number\">7</span>e6e36e <span class=\"constant\">Lorem</span> <span class=\"constant\">Ipsum</span> commit message (<span class=\"number\">2013</span>-08-<span class=\"number\">23</span> <span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">35</span><span class=\"symbol\">:</span><span class=\"number\">41</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span>) &lt;<span class=\"constant\">Vitaly</span> <span class=\"constant\">Aminev</span>&gt;\nf862213 refs <span class=\"comment\">#101: Lorem Ipsum commit message (2013-08-23 10:35:23 2013 +0400) &lt;Vitaly Aminev&gt;</span>\n<span class=\"number\">31</span>dc49c refs <span class=\"comment\">#100: Lorem Ipsum commit message (2013-08-22 09:26:40 2013 +0400) &lt;Vitaly Aminev&gt;</span>\n</pre></td></tr></table></figure>\n\n<p>Другой формат показа, используемый только для даты и сообщения в коммите:</p>\n<p><code>%Cgreen%ci%Creset %s%Creset</code></p>\n<p><strong>Генерируем:</strong></p>\n<figure class=\"highlight lang-ruby\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre>git log --author=<span class=\"constant\">Vitaly</span> --since=<span class=\"string\">'2 sunday ago'</span> --<span class=\"keyword\">until</span>=<span class=\"string\">'1 sunday ago'</span> --format=<span class=\"string\">'%Cgreen%ci%Creset %s%Creset\n\n2013-08-23 12:50:41 2013 +0400 refs #101: Lorem Ipsum commit message \n2003-08-23 12:39:35 2013 +0400 Merge branch '</span>master<span class=\"string\">' of git.example.com:your-project/your-branch\n2013-08-23 10:35:41 2013 +0400 Lorem Ipsum commit message \n2013-08-23 10:35:23 2013 +0400 refs #101: Lorem Ipsum commit message \n2013-08-22 09:26:40 2013 +0400 refs #100: Lorem Ipsum commit message\n</pre></td></tr></table></figure>\n\n<p>У нас появился базовый отчет. Клиент не должен знать что это за соединение. На самом деле я предпочитаю удалять это сообщение, используя флаг <code>no-merges</code>:</p>\n<figure class=\"highlight lang-ruby\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n</pre></td><td class=\"code\"><pre>git log --author=<span class=\"constant\">Vitaly</span> --since=<span class=\"string\">'2 sunday ago'</span> --<span class=\"keyword\">until</span>=<span class=\"string\">'1 sunday ago'</span> --format=<span class=\"string\">'%Cgreen%ci%Creset %s%Creset'</span> --no-merges\n\n<span class=\"number\">2013</span>-08-<span class=\"number\">23</span> <span class=\"number\">12</span><span class=\"symbol\">:</span><span class=\"number\">50</span><span class=\"symbol\">:</span><span class=\"number\">41</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span> refs <span class=\"comment\">#101: Lorem Ipsum commit message </span>\n<span class=\"number\">2013</span>-08-<span class=\"number\">23</span> <span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">35</span><span class=\"symbol\">:</span><span class=\"number\">41</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span> <span class=\"constant\">Lorem</span> <span class=\"constant\">Ipsum</span> commit message \n<span class=\"number\">2013</span>-08-<span class=\"number\">23</span> <span class=\"number\">10</span><span class=\"symbol\">:</span><span class=\"number\">35</span><span class=\"symbol\">:</span><span class=\"number\">23</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span> refs <span class=\"comment\">#101: Lorem Ipsum commit message </span>\n<span class=\"number\">2013</span>-08-<span class=\"number\">22</span> 09<span class=\"symbol\">:</span><span class=\"number\">26</span><span class=\"symbol\">:</span><span class=\"number\">40</span> <span class=\"number\">2013</span> +<span class=\"number\">0400</span> refs <span class=\"comment\">#100: Lorem Ipsum commit message</span>\n</pre></td></tr></table></figure>\n\n<p>Сейчас у нас есть полный отчет о проделанной работе.</p>\n<h3>На заметку:</h3>\n<p>Чтобы каждый раз не вписывать настройки, достаточно один раз их сохранить в <code>git command</code>. \nОтредактируйте <code>.git/config</code> в своем репозитории и добавьте: </p>\n<figure class=\"highlight lang-ruby\"><table><tr><td class=\"gutter\"><pre>1\n2\n</pre></td><td class=\"code\"><pre> [<span class=\"keyword\">alias</span>]\n  report = <span class=\"string\">\"log --author=Vitaly --since='2 sunday ago' --until='1 sunday ago' --format='%Cgreen%ci%Creset %s%Creset' --no-merges\"</span>\n</pre></td></tr></table></figure>\n\n<p><strong>Теперь Вы можете:</strong></p>\n<p>получить отчет;\n<code>git report</code></p>\n<p>создать больше отчетов;</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n</pre></td><td class=\"code\"><pre><span class=\"comment\">report</span>-<span class=\"comment\">csv</span> <span class=\"comment\">=</span> <span class=\"comment\">\"log</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">author=Vitaly</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">since='2</span> <span class=\"comment\">sunday</span> <span class=\"comment\">ago'</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">until='1</span> <span class=\"comment\">sunday</span> <span class=\"comment\">ago'</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">format='\\\"%ci\\\"</span>,<span class=\"comment\">\\\"%s\\\"'</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">no</span>-<span class=\"comment\">merges\"\n</pre></td></tr></table></figure>\n\n<p><em>(Внимание: экранируйте &quot; в format используя \\ )</em></p>\n<p><strong>CSV report создается:</strong></p>\n<p><code>git report-csv &gt; report.csv</code></p>\n<p><em>Ура</em>, отчет по выполненной работе теперь выглядит намного проще.</p>\n<p><em>(конечно, иногда приходится редактировать текст выведенных данных, чтобы они были понятны самому клиенту)</em></p>\n<p>Отправляйте репорты с удовольствием! =)</p>\n","excerpt":501,"source":"_posts/GitHub_report.md","slug":"GitHub_report","ctime":"2013-11-18T22:16:03.000Z","mtime":"2013-11-18T22:16:03.000Z"},"17":{"id":0,"title":"Удаление анонимного слушателя событий (anonymous event listeners) в JavaScript","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-20T00:00:00.000Z","updated":"2013-11-21T12:02:10.000Z","categories":[],"tags":[10],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/cub.jpg\" alt=\"Иллюстрация блокнота\"></p>\n<p>Одна вещь, которую я люблю в JavaScript- это поддержка замыканий &#39;closure&#39;.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertOnClick</span><span class=\"params\">(message)</span>\n{</span>\n\t    <span class=\"keyword\">var</span> btn = document.getElementById(<span class=\"string\">'btnAlert'</span>);\n\t    btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">function</span>() {\n\t        alert(message);\n\t    }, <span class=\"literal\">false</span>);\n}\n \nalertOnClick(<span class=\"string\">'You have clicked the button!'</span>);\n</pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2>alertOnClick</h2>\n<p><code>alertOnClick</code> функция добавляет анонимного обработчика событий в \nкнопку, которая была определена в HTML как страница, которая обрабатывает script. Обработчик событий не имеет собственных локальных переменных, но используется как ‘ сообщение&#39; переменной, обнаруженной во внешней функции. Это пример замыкания JS. Вложенная анонимная функция имеет доступ к аргументам (ссылка) и к функции, содержащей эти переменные. Другими словами, внутренняя функция содержит область видимости внешней функции. Примите к сведению, что внешняя функция не может использовать аргументы и переменные внутренней функции.</p>\n<p>Часто мне хочется удалить обработчик событий сразу после того, как случилось это событие. Гораздо проще когда обработчик событий не анонимный, но определить его следует вместо глобальной функции как:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> message = <span class=\"literal\">null</span>;\n\t \n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clickHandler</span><span class=\"params\">()</span>\n{</span>\n\t    alert(message);\n\t    <span class=\"comment\">// Remove the event listener, we no longer need it.</span>\n\t    <span class=\"comment\">// Note that 'this' refers to the event source: the button.</span>\n\t    <span class=\"keyword\">this</span>.removeEventListener(<span class=\"string\">'click'</span>, clickHandler, <span class=\"literal\">false</span>);\n}\n\t \n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertOnClick</span><span class=\"params\">()</span>\n{</span>\n\t    <span class=\"keyword\">var</span> btn = document.getElementById(<span class=\"string\">'btnAlert'</span>);\n\t    btn.addEventListener(<span class=\"string\">'click'</span>, clickHandler, <span class=\"literal\">false</span>);\n}\n\t \nmessage = <span class=\"string\">'You have clicked the button!'</span>;\nalertOnClick();\n</pre></td></tr></table></figure>\n\n<p>В данном примере удалить слушатель событий достаточно просто, но этот способ создания слушателя событий имеет недостатки. Для того чтобы обработчик кликов имел доступ к переменной сообщений, мы должны объявить переменную в глобальной области видимости. А это, с технической точки зрения, не так здорово.</p>\n<h2>Arguments</h2>\n<p>Вернемся к нашему первому JS примеру, с которым нет проблем. В этом примере слушатель событий и есть анонимная функция. Для  того, чтобы удалить обработчик событий такого рода, внутри самого обработчика нам потребуется получить ссылку на эту функцию. Для этого мы будем использовать переменную <code>arguments</code>, которая возможна в любой функции автоматически. Это содержит не только аргументы, переданные функции, но так же и ссылку на саму функцию: <code>arguments.callee</code>. Мы можем так же использовать эту ссылку для удаления анонимного обработчика события после того, как он был вызван.</p>\n<p>Здесь первый пример кода с одной дополнительной строкой для удаления анонимного слушателя событий.</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertOnClick</span><span class=\"params\">(message)</span>\n{</span>\n\t    <span class=\"keyword\">var</span> btn = document.getElementById(<span class=\"string\">'btnAlert'</span>);\n\t    btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"keyword\">function</span>() {\n        alert(message);\n\t        <span class=\"comment\">// Remove the event listener, we no longer need it.</span>\n\t        <span class=\"comment\">// Note that 'this' refers to the event source: the button, and</span>\n\t        <span class=\"comment\">// arguments.callee contains a reference to the function itself.</span>\n\t        <span class=\"keyword\">this</span>.removeEventListener(e.type,arguments.callee,e.eventPhase);\n\t    }, <span class=\"literal\">false</span>);\n}\n\t \nalertOnClick(<span class=\"string\">'You have clicked the button!'</span>);\n</pre></td></tr></table></figure>\n\n<p>В коде используется <code>e.type</code> как тип события и <code>e.eventPhase</code> как фаза событий.</p>\n<p>Переменная <code>arguments.callee</code> довольна полезна в таких случаях.</p>\n<p>Данные плохо документированные свойства функции являются удобными в использовании. Включайте в свой арсенал.</p>\n","excerpt":830,"source":"_posts/Delete.md","slug":"Delete","ctime":"2013-11-21T12:02:10.000Z","mtime":"2013-11-21T12:02:10.000Z"},"18":{"id":0,"title":"Как починить статус бар в iOS7","subtitle":"Как починить статус бар в iOS 7","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-21T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[27,31],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/status_bar.png\" alt=\"Статус Бар\"> </p>\n<p>Как и многие из вас я тщательно работаю над переходом на iOS7 в течении долгого времени. С момента разработки старых приложений в Xcode5 для iOS7, статус бара, накладывающегося на контроллеры видов (views/view controllers), добавилось много головной боли. </p>\n<a id=\"more\"></a>\n\n<h2>Методы исправления статус бара</h2>\n<p>Вот и уже известные методы:</p>\n<p>1.Добавляем </p>\n<p><code>self.edgesForExtendedLayout = UIRectEdgeNone; in viewDidLoad</code></p>\n<p>2.Если контроллеры видов встроены внутри <code>UINaivigationController</code> и navigation bar не спрятан, в этом случае дайте бару фоновое изображение.</p>\n<p>3.Если контроллеры видов встроены внутри <code>UINaivigationController</code> и navigation bar не спрятан, в таком случае, вы должны двигать вручную каждые 20 пикселей UIView ниже по оси <em>y</em>.</p>\n<h2>Важный трюк</h2>\n<p>Однако, когда все вышеперечисленное не работает (в моем случае отображенный модальный вид оставляет вместо статус бара черный фон). </p>\n<p>К счастью, нам на помощь приходит решающая уловка:</p>\n<figure class=\"highlight lang-objective-c\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre>        <span class=\"keyword\">if</span> (IS_IOS7) {\n        UIView *fixbar = <span class=\"string\">[[UIView alloc] init];\n        fixbar.frame = CGRectMake(0, 0, 320, 20);\n        fixbar.backgroundColor = [UIColor colorWithRed:0.973 green:0.973 blue:0.973 alpha:1]; // the default color of iOS7 bacground or any color suits your design\n        [self.view addSubview:fixbar];\n</pre></td></tr></table></figure>\n\n","excerpt":329,"source":"_posts/Status_bar_iOS7.md","slug":"Status_bar_iOS7","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"19":{"id":0,"title":"Делитесь своим localhost с кем угодно","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-22T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[31],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/localhost.jpg\" alt=\"Иллюстрация локального сайта\"></p>\n<p>Хотите узнать способ быстро поделиться локальным сайтом без необходимости его развёртывания?\nЯ с радостью расскажу как на самом деле это просто делается.</p>\n<p>Для начала установим <code>localtunnel</code>:</p>\n<p><code>$ gem install localtunnel</code></p>\n<a id=\"more\"></a>\n\n<p>Далее запускаем ваш localhost сервер, к примеру на <strong>Rails</strong>, используя default WEBrick сервер:</p>\n<p><code>$ rails s</code></p>\n<p>Или <strong>Python</strong>:</p>\n<p><code>$ python - m SimpleHTTPServer 8000</code></p>\n<p>Когда в первый раз вы запускаете localtunnel, вам нужно будет использовать один из ваших публичных SSH ключей:</p>\n<p><code>$ localtunnel -k ~/.ssh/id_rsa.pub 8000</code></p>\n<p>Вы найдете что-то подобное в конце:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n</pre></td><td class=\"code\"><pre>➜  project_name git:(develop) localtunnel <span class=\"number\">8000</span>\n   This localtunnel service is brought to you by Twilio.\n   Port <span class=\"number\">8000</span> is now publicly accessible from http://xxxx.localtunnel.com <span class=\"keyword\">...</span>\n</pre></td></tr></table></figure>\n\n\n<p>Затем просто поделитесь ссылкой <a href=\"http://xxxx.localtunnel.com\">http://xxxx.localtunnel.com</a> с тем, кому нужно показать ваш результат.\nВ дальнейшем вы можете использовать только <code>localtunnel &lt;port&gt;</code>, чтобы создавать публичный URL:</p>\n<p><code>$ localtunnel 8000</code></p>\n<p>И это все. \nУстановка и настройка занимают меньше 5-ти минут и это превосходно работает.</p>\n","excerpt":342,"source":"_posts/localhost.md","slug":"localhost","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"20":{"id":0,"title":"Почему каждый обязан знать AngularJS","subtitle":"AngularJS великолепен… и чертовски сложен","author":"Виталий Аминев","gravatarMail":"v@aminev.me","date":"2013-11-24T00:00:00.000Z","updated":"2013-11-24T21:09:32.000Z","categories":[],"tags":[5,6],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/angularjsdrupal.png\" alt=\"Иллюстрация блокнота\"></p>\n<p>Я работаю с Angular.JS почти год, с того момента как появился логотип Google на сайте фреймворка. Работа с ним последние 10 месяцев занимала у меня от 20 до 40 часов в неделю. Используя Angular.JS я написал несколько расширений для Chrome, мобильных и веб приложений, модулей и одностраничных приложений (SPA’s). </p>\n<a id=\"more\"></a>\n\n<h3>AngularJS великолепен… и чертовски сложен</h3>\n<p>Не смотря на то, что я работаю с этим фреймворком продолжительное время и с несколькими проектами, я не считаю себя гуру в нем; каждый день я натыкаюсь на большое количество ошибок в собственном коде. Я закончил с интерфейсами, которые не имеют смысла и с тесно объединенными сервисами. Не только я, но и мои сотрудники, которых я считаю высококвалифицированными разработчиками, испытывают сложности с некоторыми базовыми концептуальными моделями, которые используются при создании ПО всякий раз, когда требуется создать действительно сложное приложение. Я улучшил один из самых больших модулей в моей компании, осознав, что даже 2 месяца назад, у меня не было ни малейшей идеи как на самом деле пользоваться AngularJS.</p>\n<h3>AngularJS с самого начала</h3>\n<p>Ничего страшного, если вы полностью не разберетесь в Angular.JS с самого начала. Начинать работу с софтом намного проще, чем создавать с помощью него настоящие приложения. Чтобы понять Angular.JS полностью потребуется потратить гораздо больше времени, чем кажется.\nЕсли вы когда-либо были разочарованы фреймворком, который вы пытались изучить, хорошие новости с ангуляром заключаются в том, что его изучение всего лишь занимает время. Обучение не будет таким простым как в случае с jQuery – вы не сможете быстро прогнать пример в jsFiddle, angular потребует потратить больше усилий и времени. </p>\n<h3>Мудро подбирайте источники информации по ангуляру</h3>\n<p>Вот мои любимые:</p>\n<ul>\n<li><a href=\"http://egghead.io/\">Egghead.io Videos</a> Я относился достаточно скептически к этой странице, но после просмотра некоторых видео, я осознал что видео Джона на самом деле адекватны и стоят просмотра. Они предназначены специально для начинающих. </li>\n<li><a href=\"http://www.packtpub.com/angularjs-web-application-development/book\">The Mastering Web Application Development with AngularJS book</a> Я только, что закончил читать книгу, которая написана специально для angular.js разработчика. Книга прекрасно написана, включает практические примеры и основные трюки в его использовании. Вот она отсутствующая документация, которую теперь можно просто купить.</li>\n<li><a href=\"https://github.com/angular-app/angular-app\">AngularJS App</a> Скопируйте, запустите и играйте с этим приложением. Посмотрите как создаются директивы, как они организовывают код, как структурируют тесты. Даже сегодня я запускаю этот проект, чтобы увидеть как используются перехватчики <a href=\"http://docs.angularjs.org/api/ng.$http\">interceptors</a>, как ребята из гугл тестируют свои директивы и какие конвенции при именовании переменных используется в их провайдерах.</li>\n<li><a href=\"https://github.com/angular/angular.js/wiki\">The AngularJS Wiki</a> Всякий раз, когда вы испытываете сложности с концептуальной моделью AngularюJS и не улавливаете весь смысл об областях видимости (scopes) - открывайте и изучайте википедию по ангуляру. А так же если что-то, связанное с AngularJS вызывает у вас чувство головокружения, то вы знаете куда обращаться.</li>\n</ul>\n<h3>Концептуальная модель Angular.JS</h3>\n<p>В какой-то момент вы начнете лучше понимать концептуальную модель Angular.JS. Следующей ступенью для вас будет создание проектов, фидлов… но только с их юнит тестированием. Практика показывает, что лучшие концепты AngularJS могут быть реализованы только после добавления тестов в ваши проекты. Если вы не тестируете ваше программное обеспечение, написание кода прекращается. Отправка непроверенного программного обеспечения - это непрофессионально и этого следует избегать. Вы должны быть свободнее, когда делитесь знаниями с другими, НО в какой-то момент укажите, что ваше программное обеспечение не оттестировано или то, что вы добавите тесты позднее.</p>\n<p><strong><em>Заметка на последок</em></strong></p>\n<p>Не смотря на то, что начать работать с AngularJS  достаточно просто, но достичь мастерства сложно. Ожидаемо то, что будут постоянно вылезать ошибки.</p>\n","excerpt":400,"source":"_posts/AngularJS_begginers.md","slug":"AngularJS_begginers","ctime":"2013-11-24T21:09:32.000Z","mtime":"2013-11-24T21:09:32.000Z"},"21":{"id":0,"title":"10 топовых команд в консоли","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-26T00:00:00.000Z","updated":"2013-11-26T08:53:54.000Z","categories":[],"tags":[30],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/bash.jpg\" alt=\"Иллюстрация блокнота\"></p>\n<p>Время от времени мне нравится анализировать использование *nix команд в консоли. Чтобы сделать это, мне нужна всего-лишь небольшая команда <code>awk</code>:\n<code>history | awk &#39;{a[$2]++}END{for(i in a){print a[i] &quot; &quot; i}}&#39; | sort -rn | head</code></p>\n<a id=\"more\"></a>\n\n<h2>Что она делает?</h2>\n<p>В целом, эта команда анализирует историю использования ваших команд, смотрит на вторую колонку (это, собственно, вызванная команда) и считает сколько раз вы использовали каждую из них, а потом сортирует по частоте.\nЗатем нам демонстрируется отсортированный отчет, показывающий количество использований команд, как в следующем примере с моего ноутбука:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre>1705 git\n1420 ack\n1016 vi\n501 ls\n490 <span class=\"operator\"><span class=\"keyword\">commit</span>\n<span class=\"number\">310</span> cd\n<span class=\"number\">211</span> cat\n<span class=\"number\">202</span> g\n<span class=\"number\">191</span> rm\n<span class=\"number\">181</span> c\n</pre></td></tr></table></figure>\n\n<p>На основе этой информации я получила топ 10 используемых команд в <em>shell</em>. Отсюда очевидно, что я использую <code>git</code>, <code>ack</code> и <code>vi</code> чаще всего, это значит, что будет полезно назначить горячие клавиши или более короткие алиасы для этих команд. Я предпочитаю 1- символьные алиасы, если есть возможность их создания.</p>\n<p>Ниже пару примеров:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">alias</span> a=<span class=\"string\">\"ack\"</span>\n<span class=\"keyword\">alias</span> g=<span class=\"string\">\"git\"</span>\n<span class=\"keyword\">alias</span> v=<span class=\"string\">\"vi\"</span>\n<span class=\"keyword\">alias</span> l=<span class=\"string\">\"ls -al\"</span>\n<span class=\"keyword\">alias</span> c=<span class=\"string\">\"git commit -m\"</span>\n</pre></td></tr></table></figure>\n\n<p>Я поняла, что уже эти горячие клавиши значительно ускоряют мой рабочий процесс, а так же снижают усталость в пальцах.</p>\n<p><strong>Пожалуйста попробуйте как это работает и поделитесь со мной своими мыслями.</strong></p>\n","excerpt":341,"source":"_posts/bash.md","slug":"bash","ctime":"2013-11-26T08:53:54.000Z","mtime":"2013-11-26T08:53:54.000Z"},"22":{"id":0,"title":"Pagination. Вы все делаете неправильно!","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-28T00:00:00.000Z","updated":"2013-11-28T21:22:59.000Z","categories":[],"tags":[31],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/pagination.jpg\" alt=\"Иллюстрация блокнота\"></p>\n<h2>Pagination? Без проблем! SELECT ... LIMIT X, Y  Ведь так?</h2>\n<p>Аха!  Не совсем!\nЗнаете ли, ваша логика разбивки на страницы не блещет стабильностью; а это важно в мире, когда мы постоянно используем клиентские приложения, ajax и бесконечную прокрутку.</p>\n<a id=\"more\"></a>\n\n<h2>ТЛ;ДР</h2>\n<ul>\n<li>Не используйте разбивку на страницы по отступу от начала массива.</li>\n<li>Найдите постоянное значение по которому можно разбивать на страницы, например дата создания элемента.</li>\n<li>Всегда убирайте дубликаты из множества на клиентской стороне</li>\n</ul>\n<p>Никогда не думайте, что сервер на самом деле знает чего хочет пользователь.</p>\n<h2>О чем вы вообще говорите?</h2>\n<p>Возможно лучше привести пример. Предположим, что вы добавляете комментарии на страницу и вы хотите самые поздние показать первыми. При примитивном подходе вы можете создать запрос похожий на: </p>\n<p><code>SELECT * FROM comments ORDER BY date DESC LIMIT 0, 10</code></p>\n<p>Просто. Это дает вам 10 самых последних комментариев. Вроде все нормально. Теперь, пользователь прокручивает страницу вниз и вы выполняете тот же запрос, но с <code>LIMIT 10, 10</code> и вы возвращаете следующие 10 комментариев…</p>\n<p>…иногда.</p>\n<h3>Учтите этот случай:</h3>\n<ul>\n<li>Пользователь А просматривает страницу с первыми 10 загруженными комментариями.</li>\n<li>Пользователь B создает комментарий.</li>\n<li>Пользователь А загружает следующую страницу комментариев.</li>\n</ul>\n<p>Так, плохо. Теперь пользователь А видит дубликат комментария. \nДобавился новый комментарий и в итоге последний опустился вниз и стал 11-ым и мы его опять получили. Сейчас ваша страница выглядит как минимум неаккуратно.</p>\n<p>Похожая ситуация случается если вы позволяете удалить  элемент массива, но с еще более ужасными результатами.\nВместо комментария, который бы переместился ниже по списку, он наоборот поднялся вверх. Элемент массива, который сначала был бы первым на следующей странице, переместился выше по списку; теперь пользователь А вообще его не увидит! Это на самом деле полный отстой.</p>\n<h2>Постоянные результаты разбивки на страницы</h2>\n<p>Не беспокойтесь, такие проблемы достаточно легко решить. Вместо разбивки на страницы на основе изменчивого отступа (номера строки), найдите значение, которое остается постоянным в течении времени. В примере c комментариями таким параметром является <strong>дата публикации</strong>.</p>\n<p>На предыдущем примере: ваш первый запрос такой же.  Тем не менее, для новой страницы, вместо  того, чтобы передавать offset, передайте дату последнего комментария в списке: </p>\n<p><code>SELECT * FROM comments WHERE date &lt; prevous_date LIMIT 10</code></p>\n<p>Превосходно! Сейчас вы должны быть уверены, что пользователь всегда будет видеть следующий массив сообщений, которые следуют сразу за теми, на которые пользователь уже смотрит.</p>\n<p>Иногда…</p>\n<h3>Базинга!</h3>\n<p>А что если у вас 2 комментария с одной датой публикации? \nРазбивка на страницы сложна.</p>\n<p>У вас две возможности:\n1. Если вы используете автоматически увеличивающийся идентификатор для своего контента, используйте его вместо даты; он гарантированно увеличивается во времени и ведет себя отлично для наших потребностей. В этом случае, по сути,  вы идете по пути создания курсоров.</p>\n<ol>\n<li>Если же у вас нет автоматически увеличивающегося id ( например вы используете распределенное хранилище данных), тогда дела усложняются:</li>\n</ol>\n<p>Вместо того, чтобы найти комментарии, которые находились перед датой, найдите комментарии,  которые были созданы в то же время или после этой даты. Обязательно почистите дубликаты комментариев перед показом их пользователю.\nили:</p>\n<p>Передайте дополнительный информацию, которую вы можете использовать, чтобы игнорировать комментарии, которые пользователь уже видел ( может быть id возвращенных комментариев с их датой)</p>\n<p>Первый вариант возможно самый простой в исполнении, хоть он и требует передачи достаточно большого количества дубликатов данных.</p>\n<h3>Это прекрасно, но что делать с данной проблемой?</h3>\n<p>Что-то напоминает данный часто-встречающийся элемент управления?</p>\n<p><code>[&lt;&lt;] [&lt;] [1] 2 [3] ... [&gt;] [&gt;&gt;]</code></p>\n<p>Как сразу перейти на определенную страницу если вы используете разбивку на основе постоянных отступов как дата в комментарии? Не используйте этот контрол.</p>\n<p>Перед тем как я пойду дальше, ответьте на это: <em>как часто ваши пользователи переходят на конкретную страницу кроме как на следующую/предыдущую/первую/последнюю?</em></p>\n<p>Попрошу вас изменить подход к тому как пользователь находит нужную ему страницу и переходит на нее. Есть множество методов, которые позволяют пользователю искать контент,  который они хотят. Наиболее частый подход- это фильтрация.\nТем не менее, возникают другие интересные вопросы, не так ли?</p>\n<h2>Перейти в конец списка!</h2>\n<p>С этим миром разбивки страниц, как я позволю пользователю перейти в конец списка? Разбивка страниц сложна.</p>\n<p>Итак, если вам требуется поддержка перехода в конец списка, есть одна возможность: <em>поменяйте порядок сортировки и получите первые 10 элементов с другого направления.</em> Не так плохо!</p>\n<p>Подобным образом, как вы дадите пользователю вернуться на страницу назад? Ух! Разбивка страниц поистине сложна.\nК счастью, вы можете адаптировать подход для получения последней страницы. В конце концов это обычный список,  который вы отсортировали по-другому: возьмите дату элемента вверху списка, на который смотрит пользователь и получите страницу с элементами, которые идут до этого сообщения! Отлично!</p>\n<p>Убедитесь, что данное решение подходит для вас. Иногда возникают ситуации когда вы не можете просто изменить порядок сортировки, и тогда вам придется найти собственные оригинальные подходы (бинарный поиск! фрагментация! кто знает?)</p>\n<h2>Изменяющаяся разбивка на страницы</h2>\n<p>Постоянная разбивка на страницы - это не всегда верное решение задачи. Рассмотрим сайты типа <a href=\"http://www.reddit.com/\">Reddit</a> или <a href=\"https://news.ycombinator.com/\">Hacker News</a>. Их разбивка на страницы по существу не стабильна: элементы отсортированы,с использованием волатильного алгоритма, в котором они часто двигаются вниз или вверх по списку в течении времени. Как же они с этим справляются? Никак.</p>\n<p>Оба сайта часто демонстрируют насколько плохо могут выглядеть дубликаты элементов во время пролистывания страниц. Не все так плохо, потому что ни один из них не поддерживает бесконечную прокрутку (пока что?).</p>\n<p>Несмотря на это, есть большое количество клиентских приложений, которые отображают Reddit и Hacker News в виде списка с бесконечной прокруткой; некоторые из них показывают дубликаты новостей,  которые к томе же наезжают друг на друга. Все что нужно сделать - это устранить половину проблем, фильтруя дубликатов элементов, когда добавляется следующая страница.\nВсе же есть риск пропустить элемент, когда новости падают или поднимаются в рейтинге. </p>\n<p>Решить эту проблему сложнее: наиболее простой путь - отдавать пользователю полный список элементов, до того момента куда он дошел каждый раз, но это сумасшествие! Возможно, лучше просто проигнорировать этот случай...</p>\n","excerpt":337,"source":"_posts/Pagination.md","slug":"Pagination","ctime":"2013-11-28T21:22:59.000Z","mtime":"2013-11-28T21:22:59.000Z"},"23":{"id":0,"title":"Промисы- упрощаем использование параллельных потоков в Javascript","subtitle":"","author":"Анна Аминева","gravatarMail":"annafedotovaa@gmail.com","date":"2013-11-30T00:00:00.000Z","updated":"2013-11-30T20:39:12.000Z","categories":[],"tags":[10],"comments":true,"layout":"post","content":"<p><img src=\"/blog/images/promises.jpg\" alt=\"Иллюстрация блокнота\"></p>\n<p>Промисы - представление некоего значения в будущем. Они отличаются от типичного для Node.js стиля с огромным количеством колбэков (Callback hell), потому что они дают вам реальные значения, которые вы можете продолжать использовать.\nНесколько примеров: </p>\n<a id=\"more\"></a>\n\n<h2>Промисы представляют «обещание» будущего значения</h2>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n</pre></td><td class=\"code\"><pre><span class=\"keyword\">var</span> pinky = require(<span class=\"string\">'pinky'</span>)\n<span class=\"keyword\">var</span> fs = require(<span class=\"string\">'fs'</span>)\n\n<span class=\"comment\">// You just return a placeholder for your value,</span>\n<span class=\"comment\">// then fulfill or reject your placeholder</span>\n<span class=\"comment\">// depending on the asynchronous operation later on</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span><span class=\"params\">(filename)</span> {</span>\n    <span class=\"keyword\">var</span> promise = pinky()\n    fs.readFile(filename, <span class=\"keyword\">function</span>(error, buffer) {\n        <span class=\"keyword\">if</span> (error)  promise.reject(error)\n        <span class=\"keyword\">else</span>        promise.fulfill(buffer)\n    })\n    <span class=\"keyword\">return</span> promise\n}\n</pre></td></tr></table></figure>\n\n<h2>Промисы можно комбинировать</h2>\n<p>— Потому что они являются реальными значениями, точно так же как String или Array:</p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decode</span><span class=\"params\">(encoding, buffer)</span> {</span>\n    <span class=\"comment\">// We put things into a Promise, so we can</span>\n    <span class=\"comment\">// accept both real buffers *and* eventual ones :D</span>\n    <span class=\"keyword\">return</span> pinky(buffer).then(<span class=\"keyword\">function</span>(buffer){\n        <span class=\"keyword\">return</span> buffer.toString(encoding)\n    })\n}\n<span class=\"keyword\">var</span> data = decode(<span class=\"string\">'utf-8'</span>, read(<span class=\"string\">'foo.txt'</span>))\n</pre></td></tr></table></figure>\n\n<h2>Промисы можно использовать где угодно, ведь они - это значения</h2>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n</pre></td><td class=\"code\"><pre><span class=\"comment\">// This means we can make any function</span>\n<span class=\"comment\">// accept a promise without changing any</span>\n<span class=\"comment\">// of its code :</span>\nD\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lift2</span><span class=\"params\">(a, b, f)</span> {</span>\n    <span class=\"keyword\">return</span> pinky(a).then(<span class=\"keyword\">function</span>(valueA) {\n        <span class=\"keyword\">return</span> pinky(b).then(<span class=\"keyword\">function</span>(valueB) {\n            <span class=\"keyword\">return</span> pinky(f(valueA, valueB))\n        })\n    })\n})\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">concat</span><span class=\"params\">(a, b)</span> {</span> <span class=\"keyword\">return</span> a + b }\n<span class=\"keyword\">var</span> fooBar = lift2(data, fs.readFileSync(<span class=\"string\">'bar.txt'</span>, <span class=\"string\">'utf-8'</span>), concat)\n</pre></td></tr></table></figure>\n\n<h2>Просто создать новые комбинаторы</h2>\n<ul>\n<li><p>Все вышеперечисленные свойства облегчают эту задачу. <strong>Бонус</strong>: структурирует ваш запутанный код.</p>\n</li>\n<li><p>Все вышеперечисленные свойства облегчают задачу. <strong>Бонус</strong>: весь ваш запутанный код разделяется!</p>\n</li>\n</ul>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n</pre></td><td class=\"code\"><pre><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pipeline</span><span class=\"params\">(fns)</span> {</span>\n    <span class=\"keyword\">return</span> fns.reduce(<span class=\"keyword\">function</span>(promise, f){\n        <span class=\"keyword\">return</span> promise.then(f)\n    }, promise(<span class=\"literal\">undefined</span>) }\n}\n<span class=\"comment\">// This looks better with currying, but you</span>\n<span class=\"comment\">// can use `.bind(null, x, y)`</span>\npipeline( read(<span class=\"string\">'foo.txt'</span>)\n        , decode(<span class=\"string\">'utf-8'</span>)\n        , splitLines\n        , map(toUpperCase)\n        , joinLines\n        , write(<span class=\"string\">'screaming.txt'</span>))\n\n<span class=\"comment\">// Or in parallel</span>\nparallel( read(<span class=\"string\">'foo.txt'</span>)\n        , read(<span class=\"string\">'bar.txt'</span>)\n        , read(<span class=\"string\">'baz.txt'</span>))\n  .then(<span class=\"keyword\">function</span>(foo, bar, baz) {\n      <span class=\"keyword\">return</span> foo + <span class=\"string\">';'</span> + bar + <span class=\"string\">';'</span> + baz\n  })\n\n<span class=\"comment\">// Or in any other order you want, just</span>\n<span class=\"comment\">// build relationships between</span>\n<span class=\"comment\">// the values using `.then()` and the</span>\n<span class=\"comment\">// promise library will figure it out :D</span>\n</pre></td></tr></table></figure>\n\n<h2>Промисы стандартизированы</h2>\n<p>Выберите любую библиотеку реализующую промисы и вы сможете работать с асинхронным кодом. В добавок, если вы пишите комбинатор для promises, он будет работать везде, а не только в вашей библиотеке: <a href=\"https://github.com/killdream/pinky-combinators\">https://github.com/killdream/pinky-combinators</a></p>\n<h2>Работа без колбэков в Node.js без запар</h2>\n<p>Если вы используете Node.js, то вы можете создать комбинатор,  который позволит отказаться от колбэков всего с помощью 5 строчек кода, но мы уже сделали это за вас: </p>\n<figure class=\"highlight lang-javascript\"><table><tr><td class=\"gutter\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre></td><td class=\"code\"><pre>#### λ lift-node\n# Lifts a Node-style function into a function yielding a Promise.\n#\n# :: (a..., ((Error c, b) -&gt; ())) -&gt; Promise a c... -&gt; Promise b c\nlift-node = (f) -&gt; (...args) -&gt;\n  promise = pinky!\n  (all args) .then (as) -&gt; f ...as, (err, data) -&gt;\n                                                | err =&gt; promise.reject err\n                                                | _   =&gt; promise.fulfill data\n  return promise\n</pre></td></tr></table></figure>\n\n<h3>Ссылки и дополнительный материал</h3>\n<p>Несомненно обратите внимание на спецификацию <a href=\"https://github.com/promises-aplus/promises-spec\">https://github.com/promises-aplus/promises-spec</a> и на библиотеки, которые ее реализуют <a href=\"https://github.com/promises-aplus/promises-spec/blob/master/implementations.md\">https://github.com/promises-aplus/promises-spec/blob/master/implementations.md</a></p>\n<p>Отличные статьи по теме включают пост James Coglan <a href=\"http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/\">http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/</a> и пост Irkali <a href=\"http://jeditoolkit.com/2012/04/26/code-logic-not-mechanics.html#post\">http://jeditoolkit.com/2012/04/26/code-logic-not-mechanics.html#post</a></p>\n","excerpt":333,"source":"_posts/Promises.md","slug":"Promises","ctime":"2013-11-30T20:39:12.000Z","mtime":"2013-11-30T20:39:12.000Z"},"_primary":24},"pages":{"_primary":1},"categories":{"_primary":1},"tags":{"1":{"name":"Бизнес модель","slug":"Бизнес-модель","posts":[1]},"2":{"name":"Блог джуниора","slug":"Блог-джуниора","posts":[2,4]},"3":{"name":"Node.js","slug":"Nodejs","posts":[2,8]},"4":{"name":"MVC архитектура","slug":"MVC-архитектура","posts":[2]},"5":{"name":"Angular.JS","slug":"AngularJS","posts":[3,5,10,20]},"6":{"name":"Для новичков","slug":"Для-новичков","posts":[3,20,4,2]},"7":{"name":"SPA","slug":"SPA","posts":[4]},"8":{"name":"jQuery","slug":"jQuery","posts":[4]},"9":{"name":"Mongoose","slug":"Mongoose","posts":[4]},"10":{"name":"Javascript","slug":"Javascript","posts":[6,12,14,17,23]},"11":{"name":"Coffee-script","slug":"Coffee-script","posts":[6]},"12":{"name":"Style Guide","slug":"Style-Guide","posts":[6]},"13":{"name":"SEO","slug":"SEO","posts":[7,9]},"14":{"name":"optimisation","slug":"optimisation","posts":[7,9]},"15":{"name":"promotion","slug":"promotion","posts":[7,9]},"16":{"name":"RabbitMQ","slug":"RabbitMQ","posts":[8]},"17":{"name":"очередь сообщений","slug":"очередь-сообщений","posts":[8]},"18":{"name":"SEM","slug":"SEM","posts":[9]},"19":{"name":"marketing","slug":"marketing","posts":[9]},"20":{"name":"Cordova","slug":"Cordova","posts":[11]},"21":{"name":"PhoneGap","slug":"PhoneGap","posts":[11]},"22":{"name":"Retina","slug":"Retina","posts":[13]},"23":{"name":"CSS","slug":"CSS","posts":[13]},"24":{"name":"Sprites","slug":"Sprites","posts":[13]},"25":{"name":"HTML5","slug":"HTML5","posts":[14]},"26":{"name":"GitHub","slug":"GitHub","posts":[15,16]},"27":{"name":"iOS7","slug":"iOS7","posts":[18]},"28":{"name":"status bar","slug":"status-bar","posts":[18]},"29":{"name":"localhost","slug":"localhost","posts":[19]},"30":{"name":"bash","slug":"bash","posts":[21]},"31":{"name":"FAQ","slug":"FAQ","posts":[22,18,6,19,13]},"32":{"name":"JavaScript","slug":"JavaScript","posts":[23]},"_primary":33},"assets":{"1":{"source":"source/images/riot.jpg","mtime":"2013-11-13T19:20:29.000Z"},"2":{"source":"source/images/serf.jpg","mtime":"2013-11-13T19:20:29.000Z"},"3":{"source":"source/images/js.jpg","mtime":"2013-11-17T11:37:08.000Z"},"4":{"source":"source/images/notepad.jpg","mtime":"2013-11-17T11:48:32.000Z"},"5":{"source":"source/images/selfie.jpg","mtime":"2013-11-18T10:55:22.000Z"},"6":{"source":"source/images/paper.jpg","mtime":"2013-11-18T22:09:15.000Z"},"7":{"source":"source/images/cub.jpg","mtime":"2013-11-20T16:30:47.000Z"},"8":{"source":"source/images/status_bar.png","mtime":"2013-11-21T11:54:45.000Z"},"9":{"source":"source/images/localhost.jpg","mtime":"2013-11-22T13:32:01.000Z"},"10":{"source":"source/images/angularjsdrupal.png","mtime":"2013-11-24T18:09:08.000Z"},"11":{"source":"source/images/bash.jpg","mtime":"2013-11-26T08:26:00.000Z"},"12":{"source":"source/images/pagination.jpg","mtime":"2013-11-28T21:07:47.000Z"},"13":{"source":"source/images/promises.jpg","mtime":"2013-11-30T15:09:41.000Z"},"_primary":14}}